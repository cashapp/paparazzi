apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.github.gmazzo.buildconfig'

// This module is included in two projects:
// - In the root project where it's released as one of our artifacts
// - In build-logic project where we can use it for the test-schema and samples.
//
// We only want to publish when it's being built in the root project.
if (rootProject.name == 'paparazzi-root') {
  apply plugin: 'com.vanniktech.maven.publish'
}

gradlePlugin {
  plugins {
    paparazzi {
      id = 'app.cash.paparazzi'
      implementationClass = 'app.cash.paparazzi.gradle.PaparazziPlugin'
    }
  }
}

configurations {
  fixtureClasspath
  testImplementation.extendsFrom(fixtureClasspath)
}

tasks.named('pluginUnderTestMetadata').configure {
  pluginClasspath.from(configurations.fixtureClasspath)
}

dependencies {
  compileOnly gradleApi()
  compileOnly libs.plugin.kotlin
  compileOnly libs.plugin.android

  implementation platform(libs.kotlin.bom)
  implementation(libs.tools.sdkCommon) {
    because "SymbolUtils.getPackageNameFromManifest removed in AGP 7.0.  Replace?"
  }
  implementation libs.moshi.core
  implementation libs.moshi.adapters
  implementation libs.moshi.kotlinReflect

  testImplementation libs.junit
  testImplementation libs.truth

  fixtureClasspath libs.plugin.kotlin
  fixtureClasspath libs.plugin.kotlin.compose
  fixtureClasspath libs.plugin.android
}

buildConfig {
  useKotlinOutput {
    internalVisibility = true
    topLevelConstants = true
  }

  packageName('app.cash.paparazzi.gradle')
  buildConfigField("String", "VERSION", "\"${project.version}\"")
  buildConfigField("String", "NATIVE_LIB_VERSION", "\"${libs.versions.layoutlib.get()}\"")
}

tasks.withType(Test).configureEach {
  // These are referenced with relative paths in src/test/projects/test.settings.gradle.
  // They need to be declared on the Test task to make sure it runs with the new files.
  inputs.file(rootProject.layout.projectDirectory.file("gradle/libs.versions.toml"))
    .withPropertyName("libs.versions.toml")
  inputs.dir(rootProject.layout.buildDirectory.dir("localMaven"))
    .withPropertyName("localMaven")
  dependsOn(':paparazzi:publishMavenPublicationToProjectLocalMavenRepository')
}

// When cleaning this project, we also want to clean the test projects.
tasks.named("clean").configure { cleaner ->
  cleaner.doFirst {
    project.file('src/test/projects').eachFile { root ->
      new File(root, '.gradle').deleteDir()
      new File(root, 'build').deleteDir()
    }
  }
}
