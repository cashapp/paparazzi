{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Paparazzi","text":"<p>An Android library to render your application screens without a physical device or emulator.</p> <pre><code>class LaunchViewTest {\n  @get:Rule\n  val paparazzi = Paparazzi(\n    deviceConfig = PIXEL_5,\n    theme = \"android:Theme.Material.Light.NoActionBar\"\n    // ...see docs for more options\n  )\n\n  @Test\n  fun launchView() {\n    val view = paparazzi.inflate&lt;LaunchView&gt;(R.layout.launch)\n    // or...\n    // val view = LaunchView(paparazzi.context)\n\n    view.setModel(LaunchModel(title = \"paparazzi\"))\n    paparazzi.snapshot(view)\n  }\n\n  @Test\n  fun launchComposable() {\n    paparazzi.snapshot {\n      MyComposable()\n    }\n  }\n}\n</code></pre>"},{"location":"#tasks","title":"Tasks","text":"<pre><code>./gradlew sample:testDebug\n</code></pre> <p>Runs tests and generates an HTML report at <code>sample/build/reports/paparazzi/</code> showing all test runs and snapshots.</p> <pre><code>./gradlew sample:recordPaparazziDebug\n</code></pre> <p>Saves snapshots as golden values to a predefined source-controlled location (defaults to <code>src/test/snapshots</code>).</p> <pre><code>./gradlew sample:verifyPaparazziDebug\n</code></pre> <p>Runs tests and verifies against previously-recorded golden values. Failures generate diffs at <code>sample/build/paparazzi/failures</code>.</p> <p>For more examples, check out the sample project.</p>"},{"location":"#git-lfs","title":"Git LFS","text":"<p>It is recommended you use Git LFS to store your snapshots.  Here\u2019s a quick setup:</p> <pre><code>brew install git-lfs\ngit config core.hooksPath  # optional, confirm where your git hooks will be installed\ngit lfs install --local\ngit lfs track \"**/snapshots/**/*.png\"\ngit add .gitattributes\n# Optional to improve git checkout performance\ngit config lfs.setlockablereadonly false\n</code></pre> <p>On CI, you might set up something like:</p> <p><code>$HOOKS_DIR/pre-receive</code> <pre><code># compares files that match .gitattributes filter to those actually tracked by git-lfs\ndiff &lt;(git ls-files ':(attr:filter=lfs)' | sort) &lt;(git lfs ls-files -n | sort) &gt;/dev/null\n\nret=$?\nif [[ $ret -ne 0 ]]; then\n  echo &gt;&amp;2 \"This remote has detected files committed without using Git LFS. Run 'brew install git-lfs &amp;&amp; git lfs install' to install it and re-commit your files.\";\n  exit 1;\nfi\n</code></pre></p> <p><code>your_build_script.sh</code> <pre><code>if [[ is running snapshot tests ]]; then\n  # fail fast if files not checked in using git lfs\n  \"$HOOKS_DIR\"/pre-receive\n  git lfs install --local\n  git lfs pull\nfi\n</code></pre></p>"},{"location":"#jetifier","title":"Jetifier","text":"<p>If using Jetifier to migrate off Support libraries, add the following to your <code>gradle.properties</code> to exclude bundled Android dependencies.</p> <pre><code>android.jetifier.ignorelist=android-base-common,common\n</code></pre>"},{"location":"#lottie","title":"Lottie","text":"<p>When taking screenshots of Lottie animations, you need to force Lottie to not run on a background thread, otherwise Paparazzi can throw exceptions #494, #630.</p> <pre><code>@Before\nfun setup() {\n    LottieTask.EXECUTOR = Executor(Runnable::run)\n}\n</code></pre>"},{"location":"#localinspectionmode","title":"LocalInspectionMode","text":"<p>Some Composables \u2013 such as <code>GoogleMap()</code> \u2013 check for <code>LocalInspectionMode</code> to short-circuit to a <code>@Preview</code>-safe Composable.</p> <p>However, Paparazzi does not set <code>LocalInspectionMode</code> globally to ensure that the snapshot represents the true production output, similar to how it overrides <code>View.isInEditMode</code> for legacy views.</p> <p>As a workaround, we recommend wrapping such a Composable in a custom Composable with a <code>CompositionLocalProvider</code> and setting <code>LocalInspectionMode</code> there.</p> <pre><code> @Test\n  fun inspectionModeView() {\n    paparazzi.snapshot(\n      CompositionLocalProvider(LocalInspectionMode provides true) {\n        YourComposable()\n      }\n    )\n  }\n</code></pre>"},{"location":"#releases","title":"Releases","text":"<p>Our change log has release history.</p> <p>Using plugin application: <pre><code>buildscript {\n  repositories {\n    mavenCentral()\n    google()\n  }\n  dependencies {\n    classpath 'app.cash.paparazzi:paparazzi-gradle-plugin:1.3.5'\n  }\n}\n\napply plugin: 'app.cash.paparazzi'\n</code></pre></p> <p>Using the plugins DSL: <pre><code>plugins {\n  id 'app.cash.paparazzi' version '1.3.5'\n}\n</code></pre></p> <p>Snapshots of the development version are available in Sonatype\u2019s <code>snapshots</code> repository.</p> <pre><code>repositories {\n  // ...\n  maven {\n    url 'https://oss.sonatype.org/content/repositories/snapshots/'\n  }\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2019 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"accessibility/","title":"AccessibilityRenderExtension Overview","text":"<p>The <code>AccessibilityRenderExtension</code> allows accessibility properties to be visually checked alongside a snapshot of the UI under test. Like regular Paparazzi tests, tests using the <code>AccessibilityRenderExtension</code> provide a way to compare changes that update accessibility handling to \u201cgolden snapshots\u201d that have been recorded previously. This can help catch regressions to accessibility support. The <code>AccessibilityRenderExtension</code> does not inform developers whether or not the accessibility properties and their content are appropriate for the specific use case of your UI. That is up to the developer writing the test to understand within the context of the UI under test (see below for some tips on how to verify this).</p>"},{"location":"accessibility/#set-up-guide","title":"Set Up Guide","text":"<p>To create an accessibility snapshot test, the only change needed compared to a regular Paparazzi test is to add the <code>AccessibilityRenderExtension</code> to the <code>renderExtensions</code> set in your Paparazzi configuration, as follows:</p> <pre><code>@get:Rule\nval paparazzi = Paparazzi(\n    // ...\n    renderExtensions = setOf(AccessibilityRenderExtension()),\n    // ...\n)\n</code></pre> <p>Recording and verifying accessibility snapshot tests works identically to regular Paparazzi tests.</p>"},{"location":"accessibility/#interpreting-accessibility-snapshots","title":"Interpreting Accessibility Snapshots","text":"<p>Figure A: Example accessibility snapshot</p> <p>The legend on the right hand side of figure A above indicates some of the properties that are available to assistive technologies (such as TalkBack). The order in which the items appear in the legend matches the order in which the screen reader will surface them to the user (in nearly all cases, they should go from start to end, top to bottom). The colors for each item in the legend match each accessibility element with its corresponding UI element. Each highlighted area is a single screen reader focusable element.</p> <p>To help understand whether the accessibility property values you are seeing in your snapshots are sufficient for providing your customers with an accessible experience, referencing the WCAG criteria is a good place to start. For example, 4.1.2 Name, Role, Value is a criteria that must be met for any custom component you create (standard Android components will meet this criteria by default). To pass that criteria, the name (e.g. \u201cSubmit\u201d), role (e.g. \u201cButton\u201d) and value (if applicable, e.g. \u201cSelected\u201d), must be available to assistive technology users. You can check whether this criteria is met by verifying whether the text for each of your UI elements in the legend of your accessibility snapshots covers the name, role and value of the elements under test.</p>"},{"location":"accessibility/#things-to-look-for","title":"Things to Look For","text":"<ul> <li>All visually available text<ul> <li>All text you see in the UI in the left pane should also be available in the legend on the right.</li> </ul> </li> <li>Ordering<ul> <li>The order of the items in the legend should make logical sense within the context of your application.</li> </ul> </li> <li>Visual cues<ul> <li>Are there things represented by colors or position that aren\u2019t communicated in the legend? Examples could be red used to represent an error without textual description or a label and value being next to each other visually, but displayed separately in the legend, losing that relationship.</li> </ul> </li> <li>Image descriptions<ul> <li>Images and icons that convey meaning should have descriptions for them represented in the legend. On the other hand, images and icons that don\u2019t convey additional meaning (Like a \u270f\ufe0f icon paired with visual \u201cEdit\u201d text on a button <code>[\u270f\ufe0f Edit]</code>) shouldn\u2019t have representation in the legend, as that would be repetitive.</li> </ul> </li> <li>Roles and states<ul> <li>The correct role or state (header, button, disabled, checked, etc.) should be represented in the legend.</li> </ul> </li> </ul>"},{"location":"accessibility/#currently-supported-properties","title":"Currently Supported Properties","text":"<ul> <li>Content Description<ul> <li>This is the main text read out by Talkback to describe a UI element. For text based elements (i.e. <code>TextView</code> or Composable <code>Text</code>), this is likely the text content itself.</li> </ul> </li> <li>Role (Compose only)<ul> <li>The role of an element, such as \u201cbutton\u201d, \u201ccheckbox\u201d, or \u201cimage\u201d. It helps assistive technologies identify the purpose of a UI component.</li> </ul> </li> <li>Selected state<ul> <li>Indicates whether an item is currently selected. For example, in a list of selectable items, the selected item will announce its state as \u201cselected\u201d to TalkBack users.</li> </ul> </li> <li>Disabled state<ul> <li>Indicates whether an element is currently disabled and not interactive. Disabled elements are announced as \u201cdisabled\u201d by TalkBack, signaling they are unavailable for interaction.</li> </ul> </li> <li>On click label (Compose only)<ul> <li>Provides additional context to a user about what will happen when an element is activated. This label is read by TalkBack alongside the action and is especially useful for custom buttons or interactive elements.</li> </ul> </li> <li>Heading (Compose only)<ul> <li>Marks an element as a heading for screen readers. This helps users navigate through content quickly, as headings can be used as landmarks or points of reference in a layout.</li> </ul> </li> <li>Toggleable state<ul> <li>Indicates whether an element can be toggled on or off, such as a switch or a checkbox. The state (e.g. \u201cchecked\u201d or \u201cunchecked\u201d) is announced by TalkBack to convey its current value.</li> </ul> </li> </ul>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Support for editable text in accessibility snapshots</li> <li>Support for error description in accessibility snapshots</li> </ul>"},{"location":"changelog/#135-2024-11-06","title":"1.3.5 - 2024-11-06","text":""},{"location":"changelog/#new","title":"New","text":"<ul> <li>Render pending recompositions for <code>@Composable</code>s that require a second layout pass</li> <li>Support for overlays in accessibility snapshots</li> <li>Support for Compose UI heading and selected states in accessibility snapshots</li> <li>Support for toggleable state in accessibility snapshots</li> <li>Support for displaying multiple accessibility descriptions, similar to Talkback</li> <li>Include failure delta image in JUnit test reporting</li> <li>Migrate Paparazzi to layoutlib Jellyfish 2023.3.1</li> <li>Compose 1.7.5</li> <li>Kotlin 2.0.21</li> <li>[Gradle Plugin] Gradle 8.10.2</li> <li>[Gradle Plugin] Android Gradle Plugin 8.4.2</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Improve Gradle test task caching by preventing overlapping outputs with snapshotOutputDir</li> <li>Migrate plugin to use modern AGP variant APIs</li> <li>Fix support for AndroidX ResourcesCompat.getFont()</li> <li>Fix inconsistent cross-platform text renderings in failure delta image</li> <li>Relax image comparisons with OffByTwo differ to work around cross-platform rendering issues</li> <li>Fix when clearAndSetSemantics is used to render content descriptions in accessibility snapshots</li> <li>Avoid invalid chars in Windows filenames</li> <li>Fix file move failures on Windows</li> <li>Avoid hash collisions when images have similar RGB content</li> <li>Cleanup unnecessary \u201cloadPublicResourceNames\u201d warning from log output</li> <li>Additional bug fixes with accessibility snapshot tests</li> </ul> <p>Kudos to @geoff-powell, @colinmarsch, @BrianGardnerAtl, @ribafish, @gabrielittner and others for contributions this release!</p>"},{"location":"changelog/#134-2024-05-23","title":"1.3.4 - 2024-05-23","text":""},{"location":"changelog/#new_1","title":"New","text":"<ul> <li>Support for animated-PNG-based snapshots using Paparazzi#gif</li> <li>New tasks! deletePaparazziSnapshots and cleanRecordPaparazzi${VARIANT} clear orphaned snapshots</li> <li>Add boolean flag to decide if image should be scaled or full-sized</li> <li>Migrate Paparazzi to layoutlib Iguana 2023.2.1</li> <li>Compose 1.5.14</li> <li>Kotlin 1.9.24</li> <li>[Gradle Plugin] Gradle 8.7</li> <li>[Gradle Plugin] Android Gradle Plugin 8.3.2</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fix long content description being cut off in accessibility snapshots</li> <li>Include resource references from generated resource folders</li> <li>Fix gradle caching for resources coming from aar dependencies</li> <li>Support SHRINK render mode when using unsafeUpdateConfig</li> <li>Fix issue where multiple snapshots fail when using render extensions</li> <li>Remove guava workaround from 1.3.2 now that Collector APIs are in guava-android</li> </ul> <p>Kudos to @geoff-powell, @gamepro65, @kevinzheng-ap, @nak5ive, @TWiStErRob, @emuguy1 and others for contributions this release!</p>"},{"location":"changelog/#133-2024-03-01","title":"1.3.3 - 2024-03-01","text":""},{"location":"changelog/#new_2","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Hedgehog 2023.1.1</li> <li>Compose 1.5.8</li> <li>Kotlin 1.9.22</li> <li>[Gradle Plugin] Gradle 8.6</li> <li>[Gradle Plugin] Android Gradle Plugin 8.2.1</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Update the DeviceConfig screenWidth internally for accessibility tests</li> <li>Fix variant caching issues in new resource/asset loading mechanisms</li> <li>Remove legacy resources/assets loading mechanism</li> <li>Set HardwareConfig width and height based on orientation</li> <li>Apply round screen qualifier to device config</li> <li>Restrict Paparazzi\u2019s public API</li> <li>Remove obsolete NEXUS_5_LAND DeviceConfig</li> <li>Fix formatting so that all digits show upon failure</li> <li>Stop resolving dependencies at configuration time</li> <li>Use our own internal HandlerDispatcher for Compose Ui tests</li> <li>Include generated string resources</li> <li>Reset logger to prevent swallowing exceptions</li> </ul> <p>Kudos to @gamepro65, @kevinzheng-ap, @BrianGardnerAtl, @adamalyyan, and others for contributions this release!</p>"},{"location":"changelog/#132-2024-01-13","title":"1.3.2 - 2024-01-13","text":""},{"location":"changelog/#note-due-to-a-known-issue-with-how-guava-now-publishes-its-artifact-you-will-need-to-apply-the-following-snippet-workaround-to-your-root-buildgradle","title":"NOTE: Due to a known issue with how Guava now publishes its artifact, you will need to apply the following snippet workaround to your root build.gradle:","text":"<p><pre><code>subprojects {\n  plugins.withId(\"app.cash.paparazzi\") {\n    // Defer until afterEvaluate so that testImplementation is created by Android plugin.\n    afterEvaluate {\n      dependencies.constraints {\n        add(\"testImplementation\", \"com.google.guava:guava\") {\n          attributes {\n            attribute(\n              TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE,\n              objects.named(TargetJvmEnvironment, TargetJvmEnvironment.STANDARD_JVM)\n            )\n          }\n          because(\"LayoutLib and sdk-common depend on Guava's -jre published variant.\" +\n            \"See https://github.com/cashapp/paparazzi/issues/906.\")\n        }\n      }\n    }\n  }\n}\n</code></pre> See also: https://github.com/google/guava/issues/6801.</p>"},{"location":"changelog/#new_3","title":"New","text":"<ul> <li> <p>Support for pseudolocalization tests!  To get started: <pre><code>@RunWith(TestParameterInjector::class)\nclass PseudolocalizationTest(\n  @TestParameter locale: Locale\n) {\n  @get:Rule val paparazzi = Paparazzi(\n    deviceConfig = DeviceConfig.PIXEL_5.copy(locale = locale.tag)\n  )\n\n  @Test fun test() {\n    paparazzi.snapshot { SomeComposable() }\n  }\n\n  enum class Locale(val tag: String?) {\n    Default(null),\n    Accent(\"en-rXA\"),\n    Bidi(\"ar-rXB\")\n  }\n}\n</code></pre></p> </li> <li> <p>Migrate Paparazzi to layoutlib Giraffe 2022.3.1</p> </li> <li>Compose 1.5.0</li> <li>Kotlin 1.9.0</li> <li>[Gradle Plugin] Gradle 8.5</li> <li>[Gradle Plugin] Android Gradle Plugin 8.1.1</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fix relativePath bug in port of ResourceFile</li> <li>Resolve report dir from ReportingExtension instead of hardcoding</li> <li>Make report folder variant-aware</li> <li>Remove reliance on kotlinx.coroutines.main.delay</li> <li>Use a class file locator that queries the system class loader</li> <li>Filter out unrecognized java-symbol tag warning</li> <li>Skip synthetic fields in R classes</li> <li>Update task inputs for resources and assets to account for file renames and moves</li> <li>Update delta images to support showing diff when width and height differ</li> </ul> <p>Kudos to @kevinzheng-ap, @TWiStErRob, @gamepro65, @adamalyyan, @larryng, and others for contributions this release!</p>"},{"location":"changelog/#131-2023-07-18","title":"1.3.1 - 2023-07-18","text":""},{"location":"changelog/#new_4","title":"New","text":"<ul> <li> <p>Migrated to new resource and asset loading mechanisms.  To explicitly opt-out and fall back to the legacy mechanisms, add either/both of the following to your <code>gradle.properties</code>: <pre><code>app.cash.paparazzi.legacy.resource.loading=true\napp.cash.paparazzi.legacy.asset.loading=true\n</code></pre></p> </li> <li> <p>The Android system ui (status + navigation bar) is now hidden by default; to re-enable: <pre><code>  @get:Rule\n  val paparazzi = Paparazzi(\n    showSystemUi = true\n  )\n</code></pre></p> </li> <li> <p>Relocate failure deltas from <code>PROJECT_ROOT/out/failures/</code> to <code>BUILD_DIR/paparazzi/failures/</code></p> </li> <li>Support for application and dynamic feature modules</li> <li>[Gradle Plugin] Gradle 8.2.1</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fix accessibility labels when mergeDescendants is true</li> <li>Fixes compose alert dialogs not rendering when using RenderingMode.SHRINK</li> </ul> <p>Kudos to @kevinzheng-ap, @adamalyyan and others for contributions this release!</p>"},{"location":"changelog/#130-2023-05-31","title":"1.3.0 - 2023-05-31","text":"<p>As of this release, consumers must build on Java 17+ environments.</p>"},{"location":"changelog/#new_5","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Flamingo 2022.2.1</li> <li>Add accessibility support for Composables</li> <li>Add layout accessibility check support</li> <li>Compose 1.4.7</li> <li>Kotlin 1.8.21</li> <li>[Gradle Plugin] Gradle 8.1.1</li> <li>[Gradle Plugin] Android Gradle Plugin 8.0.2</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Configure android.os.Build values via reflection</li> <li>Various bug fixes with AccessibilityRenderExtension</li> <li>Make sure changes to system properties actually affect test tasks</li> <li>Fix caching bug with preparePaparazziResources task</li> <li>Use Dispatchers.Main for delay functionality</li> <li>Recomposition does not happen unless lifecycle is RESUMED</li> <li>Fix NPE when unit test variant is disabled</li> <li>Fix incompatibility with androidx.savedstate:1.1.0</li> </ul> <p>Kudos to @gamepro65, @geoff-powell, @TWiStErRob, @adamalyyan and others for contributions this release!</p>"},{"location":"changelog/#120-2023-01-18","title":"1.2.0 - 2023-01-18","text":""},{"location":"changelog/#new_6","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Electric Eel 2022.1.1</li> <li>Add support for RenderingMode.SHRINK to allow view-only screenshots</li> <li>Expose flag to show/hide system ui</li> <li>Register a default OnBackPressedDispatcherOwner if its present in classpath</li> <li>Bump default compileSdk to API 33</li> <li>Compose 1.3.1</li> <li>Kotlin 1.7.20</li> <li>[Gradle Plugin] Gradle 7.6</li> <li>[Gradle Plugin] Android Gradle Plugin 7.4.0</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Flush errors on unsafeUpdateConfig</li> <li>Only apply wear circle shape to full device screenshots</li> <li>Synchronize access to Handler_Delegate.queue</li> <li>Apply compose hooks to all snapshot calls</li> <li>Register LifecycleOwner and SavedStateRegistryOwner to all views</li> <li>Execute Handler callbacks after snapshots to clean up Compose references</li> <li>Fix RecyclerView issue due to layoutlib Dolphin update</li> <li>Keep AGP and tools dependencies aligned</li> </ul> <p>Kudos to @gamepro65, @saket, @rharter and others for contributions this release!</p>"},{"location":"changelog/#110-2022-10-12","title":"1.1.0 - 2022-10-12","text":""},{"location":"changelog/#new_7","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Chipmunk 2021.2.1</li> <li>Add support for multiplatform plugin</li> <li>Add support for JDKs 16+</li> <li>Add support for locales and layout direction (LTR/RTL)</li> <li>Add Pixel 6 &amp; Pixel 6 Pro device configs</li> <li>Enable night mode for legacy views and composables</li> <li>Enable ui mode to support form factors other than phones/tablets, e.g., auto, watches, etc.</li> <li>Google Wear DeviceConfig support</li> <li>Expose an API for offsetting frame capture time</li> <li>Add InstantAnimationsRule to delay snapshot capture until the last frame.</li> <li>Compose 1.3.0</li> <li>Kotlin 1.7.10</li> <li>[Gradle Plugin] Gradle 7.5.1</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Generate resource ids to support aapt inline resources in composables</li> <li>Reset AndroidUiDispatcher between compose snapshots</li> <li>Fix OOM error when a large number of compose snapshots are verified</li> <li>Fix HTML report in development mode</li> <li>Honor customization of Gradle\u2019s build output directory</li> <li>[Gradle Plugin] Configure native platform transformed path directly in test task to reduce cache misses</li> <li>[Gradle Plugin] Fix accidental eager task creation reducing memory pressure</li> <li>[Gradle Plugin] Fail explicitly when applying Android application plugin</li> </ul> <p>Kudos to @chris-horner, @swankjesse, @yschimke, @dniHze, @TWiStErRob, @gamepro65, @liutikas and others for contributions this release!</p>"},{"location":"changelog/#100-2022-06-03","title":"1.0.0 - 2022-06-03","text":""},{"location":"changelog/#new_8","title":"New","text":"<ul> <li>Support for Composable snapshots</li> <li>Migrate Paparazzi to layoutlib Bumblebee 2021.1.1 for better rendering and API 31 support</li> <li>Update Paparazzi configuration via new <code>unsafeUpdateConfig</code> method instead of <code>snapshot</code>/<code>gif</code></li> <li>Cache Paparazzi bootstrap logic for better performance per test suite</li> <li>Surface internally thrown exceptions from layoutlib</li> <li>Throw a more helpful exception if Android platform is missing</li> <li>Bump default compileSdk to API 31</li> <li>Compose 1.1.1</li> <li>Kotlin 1.6.10</li> <li>[Gradle Plugin] Gradle 7.4.2</li> <li>[Gradle Plugin] Android Gradle Plugin 7.1.2</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Prepend paths with file:// for clickable error output in IDE</li> <li>Update default SDK path on Linux</li> <li>Fix accessibility test logic to avoid unnecessary coloring changes on updated view ids</li> <li>Fixes crash when using InputMethodManager to show/hide keyboard</li> <li>Temporarily work around Compose runtime memory leaks</li> <li>[Gradle Plugin] Prefer namespace DSL declaration over manifest package declaration</li> <li>[Gradle Plugin] Publish plugin marker on snapshot builds</li> <li>[Gradle Plugin] Exclude androidTest sourceSets during paparazzi runs</li> </ul> <p>Kudos to @luis-cortes, @nak5ive, @alexvanyo, @gamepro65 and others for contributions this release!</p>"},{"location":"changelog/#093-2022-01-20","title":"0.9.3 - 2022-01-20","text":""},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Load the correct mac arm artifact on M1 machines</li> <li>Generate fake View.id for consistent colors for accessibility entries when views are modified</li> </ul> <p>Kudos to @geoff-powell, @nicbell for their contributions this release!</p>"},{"location":"changelog/#092-2022-01-20","title":"0.9.2 - 2022-01-20","text":"<p>Please ignore this release</p>"},{"location":"changelog/#091-2022-01-14","title":"0.9.1 - 2022-01-14","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Download mac arm artifact if on M1 machines</li> <li>Support for assets from transitive dependencies</li> <li>Add fix for ClassNotFoundException when using nonTransitiveRClass</li> <li>Update RELEASING notes to publish plugin marker artifact</li> <li>Avoid NPE in AccessibilityRenderExtension when layout params are not supplied</li> <li>Use View.id to generate consistent colors for accessibility entries when views are modified</li> </ul> <p>Kudos to @luis-cortes, @geoff-powell, @autonomousapps and @LuK1709 for their contributions this release!</p>"},{"location":"changelog/#090-2021-11-22","title":"0.9.0 - 2021-11-22","text":""},{"location":"changelog/#new_9","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Arctic Fox 2020.3.1, providing native support for M1 machines</li> <li>Migrate Paparazzi to layoutlib 4.2, unlocking future Compose support</li> <li>Add support for projects enabling non-transitive resources</li> <li>RenderExtension now visits view hierarchy pre-rendering instead of layering bitmaps post-rendering</li> <li>Fail-fast when Bridge.init fails, usually due to native crash</li> <li>Expose RenderingMode as a configurable option</li> <li>Bump default compileSdk to API 30</li> <li>Improve Java-interoperability experience</li> <li>Kotlin 1.5.31</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Don\u2019t require Android plugin to be declared before Paparazzi plugin</li> <li>Clear AnimationHandler leak after each snapshot</li> <li>Don\u2019t generate empty mov files on snapshot failure</li> <li>Add Kotlin platform bom to prevent classpath conflicts during test builds</li> <li>Use correct default Android SDK path on Windows</li> <li>Use platform-agnostic file paths in Gradle artifacts to support remote caching across platforms</li> <li>Use platform-agnostic file paths in Javascript for web page support on Windows</li> <li>Fix font scaling issue in AccessibilityRenderExtension by using bundled font</li> </ul> <p>Kudos to @luis-cortes, @geoff-powell and @TWiStErRob for their contributions this release!</p>"},{"location":"changelog/#080-2021-10-07","title":"0.8.0 - 2021-10-07","text":""},{"location":"changelog/#new_10","title":"New","text":"<ul> <li>Migrate Paparazzi to use native layoutlib for better rendering and API 30 support</li> <li>Add new extension for rendering accessibility metadata</li> <li>Add support for fontScale in DeviceConfig</li> <li>Add device config for Pixel 5</li> <li>Add tasks to Gradle task verification group</li> <li>Migrate publishing to gradle-maven-publish-plugin</li> <li>Migrate builds to Github Actions</li> <li>Migrate sample test from Burst to TestParameterInjector</li> <li>Kotlin 1.5.21</li> <li>[Gradle Plugin] Support for configuration caching</li> <li>[Gradle Plugin] Gradle 7.2</li> </ul>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Add method interceptor for matrix multiplication operations</li> <li>Don\u2019t swallow FileNotFoundExceptions when overridden platform dir doesn\u2019t exist</li> <li>[Gradle Plugin] Fix remote caching bug by referencing relative, not absolute, paths in intermediate resources file.</li> </ul>"},{"location":"changelog/#071-2021-05-17","title":"0.7.1 - 2021-05-17","text":""},{"location":"changelog/#new_11","title":"New","text":"<ul> <li>[Gradle Plugin] Support the \u2013tests option for record/verify tasks</li> </ul>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>[Gradle Plugin] Defer task configuration until created</li> </ul>"},{"location":"changelog/#070-2021-02-26","title":"0.7.0 - 2021-02-26","text":""},{"location":"changelog/#new_12","title":"New","text":"<ul> <li>Kotlin 1.4.30</li> <li>Add support for inline complex XML resources</li> <li>Enable Burst support</li> <li>Expose maximum percentage difference in image verification as a setting</li> <li>Render extension api to add extra information to snapshots</li> <li>Allow selection of night mode in DeviceConfig</li> <li>[Gradle Plugin] Gradle 6.8.3</li> <li>[Gradle Plugin] Creating an umbrella task to execute on all variants</li> </ul>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Properly execute Choreographer.doFrame after view has been laid out</li> <li>Fix broken text appearances when style resource names contain periods</li> <li>Fix ability to access asset files</li> <li>Use target-sdk to simulate device when available</li> <li>Always write screenshots to disk in record mode</li> <li>Don\u2019t crash when running on Java 12+</li> <li>[Gradle Plugin] Force test re-runs when a resource or asset has changed</li> <li>[Gradle Plugin] Force test re-runs if generated report or snapshot dirs are deleted</li> </ul>"},{"location":"changelog/#060-2020-10-02","title":"0.6.0 - 2020-10-02","text":"<p>As of this release, consumers must build on Java 11 environments.</p>"},{"location":"changelog/#new_13","title":"New","text":"<ul> <li>Point to a more recent version of layoutlib that runs on Android Q and builds with Java 11.</li> <li>Refactor Paparazzi to better support non-Gradle builds</li> <li>Added device configs for Pixel 4 series</li> </ul>"},{"location":"changelog/#052-2020-09-17","title":"0.5.2 - 2020-09-17","text":""},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>[Gradle Plugin] Fixed record and verify tasks in multi-module projects.</li> </ul>"},{"location":"changelog/#051-2020-09-17","title":"0.5.1 - 2020-09-17","text":""},{"location":"changelog/#fixed_16","title":"Fixed","text":"<ul> <li>[Gradle Plugin] Fixed race condition in record and verify tasks.</li> </ul>"},{"location":"changelog/#050-2020-09-16","title":"0.5.0 - 2020-09-16","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"code_of_conduct/","title":"Open Source Code of Conduct","text":"<p>At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone.</p> <p>This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored.</p> <p>Square\u2019s open source community strives to:</p> <ul> <li> <p>Be open: We invite anyone to participate in any aspect of our projects. Our community is    open, and any responsibility can be carried by a contributor who demonstrates the required    capacity and competence.</p> </li> <li> <p>Be considerate: People use our work, and we depend on the work of others. Consider users and    colleagues before taking action. For example, changes to code, infrastructure, policy, and    documentation may negatively impact others.</p> </li> <li> <p>Be respectful: We expect people to work together to resolve conflict, assume good intentions,    and act with empathy. Do not turn disagreements into personal attacks.</p> </li> <li> <p>Be collaborative: Collaboration reduces redundancy and improves the quality of our work. We    strive for transparency within our open source community, and we work closely with upstream    developers and others in the free software community to coordinate our efforts.</p> </li> <li> <p>Be pragmatic: Questions are encouraged and should be asked early in the process to avoid    problems later. Be thoughtful and considerate when seeking out the appropriate forum for your    questions. Those who are asked should be responsive and helpful.</p> </li> <li> <p>Step down considerately: Members of every project come and go. When somebody leaves or    disengages from the project, they should make it known and take the proper steps to ensure that    others can pick up where they left off.</p> </li> </ul> <p>This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.</p>"},{"location":"code_of_conduct/#diversity-statement","title":"Diversity Statement","text":"<p>We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal.</p> <p>Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.</p> <p>Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.</p>"},{"location":"code_of_conduct/#reporting-issues","title":"Reporting Issues","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. For more details, please see our Reporting Guidelines below.</p>"},{"location":"code_of_conduct/#thanks","title":"Thanks","text":"<p>Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter, Ubuntu, GDC, and Django communities. We are thankful for their work.</p>"},{"location":"code_of_conduct/#reporting-guide","title":"Reporting Guide","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. All reports will be handled with discretion.</p> <p>In your report please include:</p> <ul> <li>Your contact information.</li> <li>Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional    witnesses, please include them as well.</li> <li>Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly    available record (e.g. a mailing list archive or a public IRC logger), please include a link.</li> <li>Any additional information that may be helpful.</li> </ul> <p>After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.</p>"},{"location":"1.x/","title":"paparazzi - Paparazzi","text":"<p>//paparazzi</p>"},{"location":"1.x/#paparazzi","title":"paparazzi","text":""},{"location":"1.x/#packages","title":"Packages","text":"Name app.cash.paparazzi app.cash.paparazzi.accessibility"},{"location":"1.x/paparazzi/app.cash.paparazzi/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi/#types","title":"Types","text":"Name Summary DeviceConfig [jvm]class DeviceConfig(val screenHeight: Int = 1280, val screenWidth: Int = 768, val xdpi: Int = 320, val ydpi: Int = 320, val orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, val uiMode: UiMode = UiMode.NORMAL, val nightMode: NightMode = NightMode.NOTNIGHT, val density: Density = Density.XHIGH, val fontScale: Float = 1.0f, val layoutDirection: LayoutDirection = LayoutDirection.LTR, val locale: String? = null, val ratio: ScreenRatio = ScreenRatio.NOTLONG, val size: ScreenSize = ScreenSize.NORMAL, val keyboard: Keyboard = Keyboard.NOKEY, val touchScreen: TouchScreen = TouchScreen.FINGER, val keyboardState: KeyboardState = KeyboardState.SOFT, val softButtons: Boolean = true, val navigation: Navigation = Navigation.NONAV, val screenRound: ScreenRound? = null, val released: String = \"November 13, 2012\")Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse <code>build.prop</code> and <code>attrs.xml</code> to generate the appropriate maps. Environment [jvm]class Environment(val appTestDir: String, val packageName: String, val compileSdkVersion: Int, val resourcePackageNames: List&lt;String&gt;, val localResourceDirs: List&lt;String&gt;, val moduleResourceDirs: List&lt;String&gt;, val libraryResourceDirs: List&lt;String&gt;, val allModuleAssetDirs: List&lt;String&gt;, val libraryAssetDirs: List&lt;String&gt;) Flags [jvm]object Flags HtmlReportWriter [jvm]class HtmlReportWriter@JvmOverloadsconstructor(runName: String = defaultRunName(), rootDirectory: File = File(System.getProperty(\"paparazzi.report.dir\")), snapshotRootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\"))) : SnapshotHandlerCreates an HTML report that avoids writing files that have already been written. InstantAnimationsRule [jvm]class InstantAnimationsRule : TestRuleSets animation duration scale to 0 so all animations run instantly. Use this with Paparazzi to skip animations and snapshot their terminal state. Paparazzi [jvm]class Paparazzi@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false) : TestRule PaparazziSdk [jvm]class PaparazziSdk@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false, onNewFrame: (BufferedImage) -&gt; Unit) RenderExtension [jvm]interface RenderExtensionAn extension for overlaying additional information on top of each rendered frame. Snapshot [jvm]class Snapshot(val name: String?, val testName: TestName, val timestamp: Date, val tags: List&lt;String&gt; = listOf(), val file: String? = null) SnapshotHandler [jvm]interface SnapshotHandler : Closeable SnapshotVerifier [jvm]class SnapshotVerifier@JvmOverloadsconstructor(maxPercentDifference: Double, rootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\"))) : SnapshotHandler TestName [jvm]class TestName(val packageName: String, val className: String, val methodName: String)"},{"location":"1.x/paparazzi/app.cash.paparazzi/#functions","title":"Functions","text":"Name Summary detectEnvironment [jvm]fun detectEnvironment(): Environment"},{"location":"1.x/paparazzi/app.cash.paparazzi/detect-environment/","title":"detectEnvironment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/detectEnvironment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/detect-environment/#detectenvironment","title":"detectEnvironment","text":"<p>[jvm]\\ fun detectEnvironment(): Environment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/","title":"DeviceConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#deviceconfig","title":"DeviceConfig","text":"<p>[jvm]\\ class DeviceConfig(val screenHeight: Int = 1280, val screenWidth: Int = 768, val xdpi: Int = 320, val ydpi: Int = 320, val orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, val uiMode: UiMode = UiMode.NORMAL, val nightMode: NightMode = NightMode.NOTNIGHT, val density: Density = Density.XHIGH, val fontScale: Float = 1.0f, val layoutDirection: LayoutDirection = LayoutDirection.LTR, val locale: String? = null, val ratio: ScreenRatio = ScreenRatio.NOTLONG, val size: ScreenSize = ScreenSize.NORMAL, val keyboard: Keyboard = Keyboard.NOKEY, val touchScreen: TouchScreen = TouchScreen.FINGER, val keyboardState: KeyboardState = KeyboardState.SOFT, val softButtons: Boolean = true, val navigation: Navigation = Navigation.NONAV, val screenRound: ScreenRound? = null, val released: String = \"November 13, 2012\")</p> <p>Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse <code>build.prop</code> and <code>attrs.xml</code> to generate the appropriate maps.</p> <p>Defaults are for a Nexus 4 device.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#constructors","title":"Constructors","text":"DeviceConfig [jvm]constructor(screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, uiMode: UiMode = UiMode.NORMAL, nightMode: NightMode = NightMode.NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1.0f, layoutDirection: LayoutDirection = LayoutDirection.LTR, locale: String? = null, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, screenRound: ScreenRound? = null, released: String = \"November 13, 2012\")"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#types","title":"Types","text":"Name Summary Companion [jvm]object CompanionDevice specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#properties","title":"Properties","text":"Name Summary density [jvm]val density: Density folderConfiguration [jvm]val folderConfiguration: FolderConfiguration fontScale [jvm]val fontScale: Float = 1.0f hardwareConfig [jvm]val hardwareConfig: HardwareConfig keyboard [jvm]val keyboard: Keyboard keyboardState [jvm]val keyboardState: KeyboardState layoutDirection [jvm]val layoutDirection: LayoutDirection locale [jvm]val locale: String? = null navigation [jvm]val navigation: Navigation nightMode [jvm]val nightMode: NightMode orientation [jvm]val orientation: ScreenOrientation ratio [jvm]val ratio: ScreenRatio released [jvm]val released: String screenHeight [jvm]val screenHeight: Int = 1280 screenRound [jvm]val screenRound: ScreenRound? = null screenWidth [jvm]val screenWidth: Int = 768 size [jvm]val size: ScreenSize softButtons [jvm]val softButtons: Boolean = true touchScreen [jvm]val touchScreen: TouchScreen uiMode [jvm]val uiMode: UiMode uiModeMask [jvm]val uiModeMask: Int xdpi [jvm]val xdpi: Int = 320 ydpi [jvm]val ydpi: Int = 320"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#functions","title":"Functions","text":"Name Summary copy [jvm]fun copy(screenHeight: Int = this.screenHeight, screenWidth: Int = this.screenWidth, xdpi: Int = this.xdpi, ydpi: Int = this.ydpi, orientation: ScreenOrientation = this.orientation, uiMode: UiMode = this.uiMode, nightMode: NightMode = this.nightMode, density: Density = this.density, fontScale: Float = this.fontScale, layoutDirection: LayoutDirection = this.layoutDirection, locale: String? = this.locale, ratio: ScreenRatio = this.ratio, size: ScreenSize = this.size, keyboard: Keyboard = this.keyboard, touchScreen: TouchScreen = this.touchScreen, keyboardState: KeyboardState = this.keyboardState, softButtons: Boolean = this.softButtons, navigation: Navigation = this.navigation, screenRound: ScreenRound? = this.screenRound): DeviceConfig"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-device-config/","title":"DeviceConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-device-config/#deviceconfig","title":"DeviceConfig","text":"<p>[jvm]\\ constructor(screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, uiMode: UiMode = UiMode.NORMAL, nightMode: NightMode = NightMode.NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1.0f, layoutDirection: LayoutDirection = LayoutDirection.LTR, locale: String? = null, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, screenRound: ScreenRound? = null, released: String = \"November 13, 2012\")</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/copy/","title":"copy - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/copy</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/copy/#copy","title":"copy","text":"<p>[jvm]\\ fun copy(screenHeight: Int = this.screenHeight, screenWidth: Int = this.screenWidth, xdpi: Int = this.xdpi, ydpi: Int = this.ydpi, orientation: ScreenOrientation = this.orientation, uiMode: UiMode = this.uiMode, nightMode: NightMode = this.nightMode, density: Density = this.density, fontScale: Float = this.fontScale, layoutDirection: LayoutDirection = this.layoutDirection, locale: String? = this.locale, ratio: ScreenRatio = this.ratio, size: ScreenSize = this.size, keyboard: Keyboard = this.keyboard, touchScreen: TouchScreen = this.touchScreen, keyboardState: KeyboardState = this.keyboardState, softButtons: Boolean = this.softButtons, navigation: Navigation = this.navigation, screenRound: ScreenRound? = this.screenRound): DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/density/","title":"density - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/density</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/density/#density","title":"density","text":"<p>[jvm]\\ val density: Density</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/folder-configuration/","title":"folderConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/folderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/folder-configuration/#folderconfiguration","title":"folderConfiguration","text":"<p>[jvm]\\ val folderConfiguration: FolderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/font-scale/","title":"fontScale - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/fontScale</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/font-scale/#fontscale","title":"fontScale","text":"<p>[jvm]\\ val fontScale: Float = 1.0f</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/hardware-config/","title":"hardwareConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/hardwareConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/hardware-config/#hardwareconfig","title":"hardwareConfig","text":"<p>[jvm]\\ val hardwareConfig: HardwareConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard-state/","title":"keyboardState - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/keyboardState</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard-state/#keyboardstate","title":"keyboardState","text":"<p>[jvm]\\ val keyboardState: KeyboardState</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard/","title":"keyboard - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/keyboard</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard/#keyboard","title":"keyboard","text":"<p>[jvm]\\ val keyboard: Keyboard</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/layout-direction/","title":"layoutDirection - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/layoutDirection</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/layout-direction/#layoutdirection","title":"layoutDirection","text":"<p>[jvm]\\ val layoutDirection: LayoutDirection</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/locale/","title":"locale - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/locale</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/locale/#locale","title":"locale","text":"<p>[jvm]\\ val locale: String? = null</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/navigation/","title":"navigation - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/navigation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/navigation/#navigation","title":"navigation","text":"<p>[jvm]\\ val navigation: Navigation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/night-mode/","title":"nightMode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/nightMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/night-mode/#nightmode","title":"nightMode","text":"<p>[jvm]\\ val nightMode: NightMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/orientation/","title":"orientation - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/orientation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/orientation/#orientation","title":"orientation","text":"<p>[jvm]\\ val orientation: ScreenOrientation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ratio/","title":"ratio - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/ratio</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ratio/#ratio","title":"ratio","text":"<p>[jvm]\\ val ratio: ScreenRatio</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/released/","title":"released - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/released</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/released/#released","title":"released","text":"<p>[jvm]\\ val released: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-height/","title":"screenHeight - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/screenHeight</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-height/#screenheight","title":"screenHeight","text":"<p>[jvm]\\ val screenHeight: Int = 1280</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-round/","title":"screenRound - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/screenRound</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-round/#screenround","title":"screenRound","text":"<p>[jvm]\\ val screenRound: ScreenRound? = null</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-width/","title":"screenWidth - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/screenWidth</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-width/#screenwidth","title":"screenWidth","text":"<p>[jvm]\\ val screenWidth: Int = 768</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/size/","title":"size - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/size</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/size/#size","title":"size","text":"<p>[jvm]\\ val size: ScreenSize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/soft-buttons/","title":"softButtons - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/softButtons</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/soft-buttons/#softbuttons","title":"softButtons","text":"<p>[jvm]\\ val softButtons: Boolean = true</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/touch-screen/","title":"touchScreen - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/touchScreen</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/touch-screen/#touchscreen","title":"touchScreen","text":"<p>[jvm]\\ val touchScreen: TouchScreen</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode-mask/","title":"uiModeMask - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/uiModeMask</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode-mask/#uimodemask","title":"uiModeMask","text":"<p>[jvm]\\ val uiModeMask: Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode/","title":"uiMode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/uiMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode/#uimode","title":"uiMode","text":"<p>[jvm]\\ val uiMode: UiMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/xdpi/","title":"xdpi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/xdpi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/xdpi/#xdpi","title":"xdpi","text":"<p>[jvm]\\ val xdpi: Int = 320</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ydpi/","title":"ydpi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/ydpi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ydpi/#ydpi","title":"ydpi","text":"<p>[jvm]\\ val ydpi: Int = 320</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p> <p>Device specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml</p> <p>Release dates obtained from Wikipedia.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#properties","title":"Properties","text":"Name Summary GALAXY_WATCH4_CLASSIC_LARGE [jvm]@JvmFieldval GALAXY_WATCH4_CLASSIC_LARGE: DeviceConfig NEXUS_10 [jvm]@JvmFieldval NEXUS_10: DeviceConfig NEXUS_4 [jvm]@JvmFieldval NEXUS_4: DeviceConfig NEXUS_5 [jvm]@JvmFieldval NEXUS_5: DeviceConfig NEXUS_7 [jvm]@JvmFieldval NEXUS_7: DeviceConfig NEXUS_7_2012 [jvm]@JvmFieldval NEXUS_7_2012: DeviceConfig PIXEL [jvm]@JvmFieldval PIXEL: DeviceConfig PIXEL_2 [jvm]@JvmFieldval PIXEL_2: DeviceConfig PIXEL_2_XL [jvm]@JvmFieldval PIXEL_2_XL: DeviceConfig PIXEL_3 [jvm]@JvmFieldval PIXEL_3: DeviceConfig PIXEL_3_XL [jvm]@JvmFieldval PIXEL_3_XL: DeviceConfig PIXEL_3A [jvm]@JvmFieldval PIXEL_3A: DeviceConfig PIXEL_3A_XL [jvm]@JvmFieldval PIXEL_3A_XL: DeviceConfig PIXEL_4 [jvm]@JvmFieldval PIXEL_4: DeviceConfig PIXEL_4_XL [jvm]@JvmFieldval PIXEL_4_XL: DeviceConfig PIXEL_4A [jvm]@JvmFieldval PIXEL_4A: DeviceConfig PIXEL_5 [jvm]@JvmFieldval PIXEL_5: DeviceConfig PIXEL_6 [jvm]@JvmFieldval PIXEL_6: DeviceConfig PIXEL_6_PRO [jvm]@JvmFieldval PIXEL_6_PRO: DeviceConfig PIXEL_C [jvm]@JvmFieldval PIXEL_C: DeviceConfig PIXEL_XL [jvm]@JvmFieldval PIXEL_XL: DeviceConfig WEAR_OS_SMALL_ROUND [jvm]@JvmFieldval WEAR_OS_SMALL_ROUND: DeviceConfig WEAR_OS_SQUARE [jvm]@JvmFieldval WEAR_OS_SQUARE: DeviceConfig"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-g-a-l-a-x-y_-w-a-t-c-h4_-c-l-a-s-s-i-c_-l-a-r-g-e/","title":"GALAXY_WATCH4_CLASSIC_LARGE - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/GALAXY_WATCH4_CLASSIC_LARGE</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-g-a-l-a-x-y_-w-a-t-c-h4_-c-l-a-s-s-i-c_-l-a-r-g-e/#galaxy_watch4_classic_large","title":"GALAXY_WATCH4_CLASSIC_LARGE","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val GALAXY_WATCH4_CLASSIC_LARGE: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_10/","title":"NEXUS_10 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_10</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_10/#nexus_10","title":"NEXUS_10","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_10: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_4/","title":"NEXUS_4 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_4</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_4/#nexus_4","title":"NEXUS_4","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_4: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5/","title":"NEXUS_5 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_5</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5/#nexus_5","title":"NEXUS_5","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_5: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7/","title":"NEXUS_7 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_7</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7/#nexus_7","title":"NEXUS_7","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_7: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7_2012/","title":"NEXUS_7_2012 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_7_2012</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7_2012/#nexus_7_2012","title":"NEXUS_7_2012","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_7_2012: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l/","title":"PIXEL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l/#pixel","title":"PIXEL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-c/","title":"PIXEL_C - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_C</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-c/#pixel_c","title":"PIXEL_C","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_C: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-x-l/","title":"PIXEL_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-x-l/#pixel_xl","title":"PIXEL_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2/","title":"PIXEL_2 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_2</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2/#pixel_2","title":"PIXEL_2","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_2: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2_-x-l/","title":"PIXEL_2_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_2_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2_-x-l/#pixel_2_xl","title":"PIXEL_2_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_2_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a/","title":"PIXEL_3A - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3A</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a/#pixel_3a","title":"PIXEL_3A","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3A: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a_-x-l/","title":"PIXEL_3A_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3A_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a_-x-l/#pixel_3a_xl","title":"PIXEL_3A_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3A_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3/","title":"PIXEL_3 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3/#pixel_3","title":"PIXEL_3","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3_-x-l/","title":"PIXEL_3_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3_-x-l/#pixel_3_xl","title":"PIXEL_3_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4-a/","title":"PIXEL_4A - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_4A</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4-a/#pixel_4a","title":"PIXEL_4A","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_4A: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4/","title":"PIXEL_4 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_4</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4/#pixel_4","title":"PIXEL_4","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_4: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4_-x-l/","title":"PIXEL_4_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_4_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4_-x-l/#pixel_4_xl","title":"PIXEL_4_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_4_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_5/","title":"PIXEL_5 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_5</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_5/#pixel_5","title":"PIXEL_5","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_5: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6/","title":"PIXEL_6 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_6</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6/#pixel_6","title":"PIXEL_6","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_6: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6_-p-r-o/","title":"PIXEL_6_PRO - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_6_PRO</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6_-p-r-o/#pixel_6_pro","title":"PIXEL_6_PRO","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_6_PRO: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-m-a-l-l_-r-o-u-n-d/","title":"WEAR_OS_SMALL_ROUND - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/WEAR_OS_SMALL_ROUND</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-m-a-l-l_-r-o-u-n-d/#wear_os_small_round","title":"WEAR_OS_SMALL_ROUND","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val WEAR_OS_SMALL_ROUND: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-q-u-a-r-e/","title":"WEAR_OS_SQUARE - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/WEAR_OS_SQUARE</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-q-u-a-r-e/#wear_os_square","title":"WEAR_OS_SQUARE","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val WEAR_OS_SQUARE: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/","title":"Environment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/#environment","title":"Environment","text":"<p>[jvm]\\ class Environment(val appTestDir: String, val packageName: String, val compileSdkVersion: Int, val resourcePackageNames: List&lt;String&gt;, val localResourceDirs: List&lt;String&gt;, val moduleResourceDirs: List&lt;String&gt;, val libraryResourceDirs: List&lt;String&gt;, val allModuleAssetDirs: List&lt;String&gt;, val libraryAssetDirs: List&lt;String&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/#constructors","title":"Constructors","text":"Environment [jvm]constructor(appTestDir: String, packageName: String, compileSdkVersion: Int, resourcePackageNames: List&lt;String&gt;, localResourceDirs: List&lt;String&gt;, moduleResourceDirs: List&lt;String&gt;, libraryResourceDirs: List&lt;String&gt;, allModuleAssetDirs: List&lt;String&gt;, libraryAssetDirs: List&lt;String&gt;)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/#properties","title":"Properties","text":"Name Summary allModuleAssetDirs [jvm]val allModuleAssetDirs: List&lt;String&gt; appTestDir [jvm]val appTestDir: String compileSdkVersion [jvm]val compileSdkVersion: Int libraryAssetDirs [jvm]val libraryAssetDirs: List&lt;String&gt; libraryResourceDirs [jvm]val libraryResourceDirs: List&lt;String&gt; localResourceDirs [jvm]val localResourceDirs: List&lt;String&gt; moduleResourceDirs [jvm]val moduleResourceDirs: List&lt;String&gt; packageName [jvm]val packageName: String resourcePackageNames [jvm]val resourcePackageNames: List&lt;String&gt;"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/#functions","title":"Functions","text":"Name Summary copy [jvm]fun copy(appTestDir: String = this.appTestDir, packageName: String = this.packageName, compileSdkVersion: Int = this.compileSdkVersion, resourcePackageNames: List&lt;String&gt; = this.resourcePackageNames, localResourceDirs: List&lt;String&gt; = this.localResourceDirs, moduleResourceDirs: List&lt;String&gt; = this.moduleResourceDirs, libraryResourceDirs: List&lt;String&gt; = this.libraryResourceDirs, allModuleAssetDirs: List&lt;String&gt; = this.allModuleAssetDirs, libraryAssetDirs: List&lt;String&gt; = this.libraryAssetDirs): Environment"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/-environment/","title":"Environment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/Environment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/-environment/#environment","title":"Environment","text":"<p>[jvm]\\ constructor(appTestDir: String, packageName: String, compileSdkVersion: Int, resourcePackageNames: List&lt;String&gt;, localResourceDirs: List&lt;String&gt;, moduleResourceDirs: List&lt;String&gt;, libraryResourceDirs: List&lt;String&gt;, allModuleAssetDirs: List&lt;String&gt;, libraryAssetDirs: List&lt;String&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/all-module-asset-dirs/","title":"allModuleAssetDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/allModuleAssetDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/all-module-asset-dirs/#allmoduleassetdirs","title":"allModuleAssetDirs","text":"<p>[jvm]\\ val allModuleAssetDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/app-test-dir/","title":"appTestDir - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/appTestDir</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/app-test-dir/#apptestdir","title":"appTestDir","text":"<p>[jvm]\\ val appTestDir: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/compile-sdk-version/","title":"compileSdkVersion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/compileSdkVersion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/compile-sdk-version/#compilesdkversion","title":"compileSdkVersion","text":"<p>[jvm]\\ val compileSdkVersion: Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/copy/","title":"copy - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/copy</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/copy/#copy","title":"copy","text":"<p>[jvm]\\ fun copy(appTestDir: String = this.appTestDir, packageName: String = this.packageName, compileSdkVersion: Int = this.compileSdkVersion, resourcePackageNames: List&lt;String&gt; = this.resourcePackageNames, localResourceDirs: List&lt;String&gt; = this.localResourceDirs, moduleResourceDirs: List&lt;String&gt; = this.moduleResourceDirs, libraryResourceDirs: List&lt;String&gt; = this.libraryResourceDirs, allModuleAssetDirs: List&lt;String&gt; = this.allModuleAssetDirs, libraryAssetDirs: List&lt;String&gt; = this.libraryAssetDirs): Environment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-asset-dirs/","title":"libraryAssetDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/libraryAssetDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-asset-dirs/#libraryassetdirs","title":"libraryAssetDirs","text":"<p>[jvm]\\ val libraryAssetDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-resource-dirs/","title":"libraryResourceDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/libraryResourceDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-resource-dirs/#libraryresourcedirs","title":"libraryResourceDirs","text":"<p>[jvm]\\ val libraryResourceDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/local-resource-dirs/","title":"localResourceDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/localResourceDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/local-resource-dirs/#localresourcedirs","title":"localResourceDirs","text":"<p>[jvm]\\ val localResourceDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/module-resource-dirs/","title":"moduleResourceDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/moduleResourceDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/module-resource-dirs/#moduleresourcedirs","title":"moduleResourceDirs","text":"<p>[jvm]\\ val moduleResourceDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/package-name/","title":"packageName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/packageName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/package-name/#packagename","title":"packageName","text":"<p>[jvm]\\ val packageName: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/resource-package-names/","title":"resourcePackageNames - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/resourcePackageNames</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/resource-package-names/#resourcepackagenames","title":"resourcePackageNames","text":"<p>[jvm]\\ val resourcePackageNames: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/","title":"Flags - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Flags</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/#flags","title":"Flags","text":"<p>[jvm]\\ object Flags</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/#properties","title":"Properties","text":"Name Summary DEBUG_LINKED_OBJECTS [jvm]const val DEBUG_LINKED_OBJECTS: String"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-d-e-b-u-g_-l-i-n-k-e-d_-o-b-j-e-c-t-s/","title":"DEBUG_LINKED_OBJECTS - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Flags/DEBUG_LINKED_OBJECTS</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-d-e-b-u-g_-l-i-n-k-e-d_-o-b-j-e-c-t-s/#debug_linked_objects","title":"DEBUG_LINKED_OBJECTS","text":"<p>[jvm]\\ const val DEBUG_LINKED_OBJECTS: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/","title":"HtmlReportWriter - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/#htmlreportwriter","title":"HtmlReportWriter","text":"<p>[jvm]\\ class HtmlReportWriter@JvmOverloadsconstructor(runName: String = defaultRunName(), rootDirectory: File = File(System.getProperty(\"paparazzi.report.dir\")), snapshotRootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\"))) : SnapshotHandler</p> <p>Creates an HTML report that avoids writing files that have already been written.</p> <p>Images and videos are named by hashes of their contents. Paparazzi won\u2019t write two images or videos with the same contents. Note that the images/ directory includes the individual frames of each video.</p> <p>Runs are named by their date.</p> <pre><code>images\n  088c60580f06efa95c37fd8e754074729ee74a06.png\n  93f9a81cb594280f4b3898d90dfad8c8ea969b01.png\n  22d37abd0841ba2a8d0bd635954baf7cbfaa269b.png\n  a4769e43cc5901ef28c0d46c46a44ea6429cbccc.png\nvideos\n  d1cddc5da2224053f2af51f4e69a76de4e61fc41.mov\nruns\n  20190626002322_b9854e.js\n  20190626002345_b1e882.js\nindex.html\nindex.js\npaparazzi.js\n</code></pre>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/#constructors","title":"Constructors","text":"HtmlReportWriter [jvm]@JvmOverloadsconstructor(runName: String = defaultRunName(), rootDirectory: File = File(System.getProperty(\"paparazzi.report.dir\")), snapshotRootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\")))"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/#functions","title":"Functions","text":"Name Summary close [jvm]open override fun close()Release all resources and block until everything has been written to the file system. newFrameHandler [jvm]open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/-html-report-writer/","title":"HtmlReportWriter - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter/HtmlReportWriter</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/-html-report-writer/#htmlreportwriter","title":"HtmlReportWriter","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(runName: String = defaultRunName(), rootDirectory: File = File(System.getProperty(\"paparazzi.report.dir\")), snapshotRootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\")))</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/close/","title":"close - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter/close</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/close/#close","title":"close","text":"<p>[jvm]\\ open override fun close()</p> <p>Release all resources and block until everything has been written to the file system.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/new-frame-handler/","title":"newFrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter/newFrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/new-frame-handler/#newframehandler","title":"newFrameHandler","text":"<p>[jvm]\\ open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/","title":"InstantAnimationsRule - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/InstantAnimationsRule</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/#instantanimationsrule","title":"InstantAnimationsRule","text":"<p>[jvm]\\ class InstantAnimationsRule : TestRule</p> <p>Sets animation duration scale to 0 so all animations run instantly. Use this with Paparazzi to skip animations and snapshot their terminal state.</p> <p>Note that animation side effects are still performed, including calls like AnimatorListener.onAnimationEnd. This way views from fade-ins and moves are rendered as they do when the animations complete.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/#constructors","title":"Constructors","text":"InstantAnimationsRule [jvm]constructor()"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/#functions","title":"Functions","text":"Name Summary apply [jvm]open override fun apply(base: Statement, description: Description): Statement"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/-instant-animations-rule/","title":"InstantAnimationsRule - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/InstantAnimationsRule/InstantAnimationsRule</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/-instant-animations-rule/#instantanimationsrule","title":"InstantAnimationsRule","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/apply/","title":"apply - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/InstantAnimationsRule/apply</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/apply/#apply","title":"apply","text":"<p>[jvm]\\ open override fun apply(base: Statement, description: Description): Statement</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/","title":"Paparazzi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#paparazzi","title":"Paparazzi","text":"<p>[jvm]\\ class Paparazzi@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false) : TestRule</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#constructors","title":"Constructors","text":"Paparazzi [jvm]@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#properties","title":"Properties","text":"Name Summary context [jvm]val context: Context layoutInflater [jvm]val layoutInflater: LayoutInflater resources [jvm]val resources: Resources"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#functions","title":"Functions","text":"Name Summary apply [jvm]open override fun apply(base: Statement, description: Description): Statement close [jvm]fun close() gif [jvm]@JvmOverloadsfun gif(view: View, name: String? = null, start: Long = 0, end: Long = 500, fps: Int = 30) inflate [jvm]fun &lt;V : View&gt; inflate(@LayoutReslayoutId: Int): V prepare [jvm]fun prepare(description: Description) snapshot [jvm]fun snapshot(name: String? = null, composable: @Composable() -&gt; Unit)@JvmOverloadsfun snapshot(view: View, name: String? = null, offsetMillis: Long = 0) unsafeUpdateConfig [jvm]fun unsafeUpdateConfig(deviceConfig: DeviceConfig? = null, theme: String? = null, renderingMode: SessionParams.RenderingMode? = null)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/-paparazzi/","title":"Paparazzi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/Paparazzi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/-paparazzi/#paparazzi","title":"Paparazzi","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/apply/","title":"apply - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/apply</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/apply/#apply","title":"apply","text":"<p>[jvm]\\ open override fun apply(base: Statement, description: Description): Statement</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/close/","title":"close - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/close</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/close/#close","title":"close","text":"<p>[jvm]\\ fun close()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/context/","title":"context - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/context</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/context/#context","title":"context","text":"<p>[jvm]\\ val context: Context</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/gif/","title":"gif - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/gif</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/gif/#gif","title":"gif","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun gif(view: View, name: String? = null, start: Long = 0, end: Long = 500, fps: Int = 30)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/inflate/","title":"inflate - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/inflate</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/inflate/#inflate","title":"inflate","text":"<p>[jvm]\\ fun &lt;V : View&gt; inflate(@LayoutReslayoutId: Int): V</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/layout-inflater/","title":"layoutInflater - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/layoutInflater</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/layout-inflater/#layoutinflater","title":"layoutInflater","text":"<p>[jvm]\\ val layoutInflater: LayoutInflater</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/prepare/","title":"prepare - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/prepare</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/prepare/#prepare","title":"prepare","text":"<p>[jvm]\\ fun prepare(description: Description)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/resources/","title":"resources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/resources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/resources/#resources","title":"resources","text":"<p>[jvm]\\ val resources: Resources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/snapshot/","title":"snapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/snapshot/#snapshot","title":"snapshot","text":"<p>[jvm]\\ fun snapshot(name: String? = null, composable: @Composable() -&gt; Unit)</p> <p>@JvmOverloads</p> <p>fun snapshot(view: View, name: String? = null, offsetMillis: Long = 0)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/unsafe-update-config/","title":"unsafeUpdateConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/unsafeUpdateConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/unsafe-update-config/#unsafeupdateconfig","title":"unsafeUpdateConfig","text":"<p>[jvm]\\ fun unsafeUpdateConfig(deviceConfig: DeviceConfig? = null, theme: String? = null, renderingMode: SessionParams.RenderingMode? = null)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/","title":"PaparazziSdk - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/#paparazzisdk","title":"PaparazziSdk","text":"<p>[jvm]\\ class PaparazziSdk@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false, onNewFrame: (BufferedImage) -&gt; Unit)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/#constructors","title":"Constructors","text":"PaparazziSdk [jvm]@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false, onNewFrame: (BufferedImage) -&gt; Unit)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/#properties","title":"Properties","text":"Name Summary context [jvm]val context: Context layoutInflater [jvm]val layoutInflater: LayoutInflater resources [jvm]val resources: Resources"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/#functions","title":"Functions","text":"Name Summary gif [jvm]@JvmOverloadsfun gif(view: View, start: Long = 0, end: Long = 500, fps: Int = 30) inflate [jvm]fun &lt;V : View&gt; inflate(@LayoutReslayoutId: Int): V prepare [jvm]fun prepare() setup [jvm]fun setup() snapshot [jvm]fun snapshot(composable: @Composable() -&gt; Unit)@JvmOverloadsfun snapshot(view: View, offsetMillis: Long = 0) teardown [jvm]fun teardown() unsafeUpdateConfig [jvm]fun unsafeUpdateConfig(deviceConfig: DeviceConfig? = null, theme: String? = null, renderingMode: SessionParams.RenderingMode? = null)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/-paparazzi-sdk/","title":"PaparazziSdk - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/PaparazziSdk</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/-paparazzi-sdk/#paparazzisdk","title":"PaparazziSdk","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, useDeviceResolution: Boolean = false, onNewFrame: (BufferedImage) -&gt; Unit)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/context/","title":"context - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/context</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/context/#context","title":"context","text":"<p>[jvm]\\ val context: Context</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/gif/","title":"gif - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/gif</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/gif/#gif","title":"gif","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun gif(view: View, start: Long = 0, end: Long = 500, fps: Int = 30)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/inflate/","title":"inflate - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/inflate</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/inflate/#inflate","title":"inflate","text":"<p>[jvm]\\ fun &lt;V : View&gt; inflate(@LayoutReslayoutId: Int): V</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/layout-inflater/","title":"layoutInflater - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/layoutInflater</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/layout-inflater/#layoutinflater","title":"layoutInflater","text":"<p>[jvm]\\ val layoutInflater: LayoutInflater</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/prepare/","title":"prepare - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/prepare</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/prepare/#prepare","title":"prepare","text":"<p>[jvm]\\ fun prepare()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/resources/","title":"resources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/resources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/resources/#resources","title":"resources","text":"<p>[jvm]\\ val resources: Resources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/setup/","title":"setup - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/setup</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/setup/#setup","title":"setup","text":"<p>[jvm]\\ fun setup()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/snapshot/","title":"snapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/snapshot/#snapshot","title":"snapshot","text":"<p>[jvm]\\ fun snapshot(composable: @Composable() -&gt; Unit)</p> <p>@JvmOverloads</p> <p>fun snapshot(view: View, offsetMillis: Long = 0)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/teardown/","title":"teardown - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/teardown</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/teardown/#teardown","title":"teardown","text":"<p>[jvm]\\ fun teardown()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/unsafe-update-config/","title":"unsafeUpdateConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/PaparazziSdk/unsafeUpdateConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi-sdk/unsafe-update-config/#unsafeupdateconfig","title":"unsafeUpdateConfig","text":"<p>[jvm]\\ fun unsafeUpdateConfig(deviceConfig: DeviceConfig? = null, theme: String? = null, renderingMode: SessionParams.RenderingMode? = null)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/","title":"RenderExtension - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/RenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/#renderextension","title":"RenderExtension","text":"<p>interface RenderExtension</p> <p>An extension for overlaying additional information on top of each rendered frame.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/#inheritors","title":"Inheritors","text":"AccessibilityRenderExtension"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/#functions","title":"Functions","text":"Name Summary renderView [jvm]abstract fun renderView(contentView: View): ViewAllows this extension to modify the view hierarchy represented by contentView."},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/render-view/","title":"renderView - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/RenderExtension/renderView</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/render-view/#renderview","title":"renderView","text":"<p>[jvm]\\ abstract fun renderView(contentView: View): View</p> <p>Allows this extension to modify the view hierarchy represented by contentView.</p> <p>Returns the root view of the modified hierarchy.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/","title":"Snapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/#snapshot","title":"Snapshot","text":"<p>[jvm]\\ class Snapshot(val name: String?, val testName: TestName, val timestamp: Date, val tags: List&lt;String&gt; = listOf(), val file: String? = null)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/#constructors","title":"Constructors","text":"Snapshot [jvm]constructor(name: String?, testName: TestName, timestamp: Date, tags: List&lt;String&gt; = listOf(), file: String? = null)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/#properties","title":"Properties","text":"Name Summary file [jvm]val file: String? = null name [jvm]val name: String? tags [jvm]val tags: List&lt;String&gt; testName [jvm]val testName: TestName timestamp [jvm]val timestamp: Date"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/#functions","title":"Functions","text":"Name Summary copy [jvm]fun copy(name: String? = this.name, testName: TestName = this.testName, timestamp: Date = this.timestamp, tags: List&lt;String&gt; = this.tags, file: String? = this.file): Snapshot"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/-snapshot/","title":"Snapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/Snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/-snapshot/#snapshot","title":"Snapshot","text":"<p>[jvm]\\ constructor(name: String?, testName: TestName, timestamp: Date, tags: List&lt;String&gt; = listOf(), file: String? = null)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/copy/","title":"copy - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/copy</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/copy/#copy","title":"copy","text":"<p>[jvm]\\ fun copy(name: String? = this.name, testName: TestName = this.testName, timestamp: Date = this.timestamp, tags: List&lt;String&gt; = this.tags, file: String? = this.file): Snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/file/","title":"file - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/file</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/file/#file","title":"file","text":"<p>[jvm]\\ val file: String? = null</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/name/","title":"name - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/name/#name","title":"name","text":"<p>[jvm]\\ val name: String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/tags/","title":"tags - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/tags</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/tags/#tags","title":"tags","text":"<p>[jvm]\\ val tags: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/test-name/","title":"testName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/testName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/test-name/#testname","title":"testName","text":"<p>[jvm]\\ val testName: TestName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/timestamp/","title":"timestamp - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/timestamp</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/timestamp/#timestamp","title":"timestamp","text":"<p>[jvm]\\ val timestamp: Date</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/","title":"SnapshotHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#snapshothandler","title":"SnapshotHandler","text":"<p>interface SnapshotHandler : Closeable</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#inheritors","title":"Inheritors","text":"HtmlReportWriter SnapshotVerifier"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#types","title":"Types","text":"Name Summary FrameHandler [jvm]interface FrameHandler : Closeable"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#functions","title":"Functions","text":"Name Summary close [jvm]abstract override fun close() newFrameHandler [jvm]abstract fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/new-frame-handler/","title":"newFrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler/newFrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/new-frame-handler/#newframehandler","title":"newFrameHandler","text":"<p>[jvm]\\ abstract fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/","title":"FrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler/FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/#framehandler","title":"FrameHandler","text":"<p>[jvm]\\ interface FrameHandler : Closeable</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/#functions","title":"Functions","text":"Name Summary close [jvm]abstract override fun close() handle [jvm]abstract fun handle(image: BufferedImage)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/handle/","title":"handle - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler/FrameHandler/handle</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/handle/#handle","title":"handle","text":"<p>[jvm]\\ abstract fun handle(image: BufferedImage)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/","title":"SnapshotVerifier - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#snapshotverifier","title":"SnapshotVerifier","text":"<p>[jvm]\\ class SnapshotVerifier@JvmOverloadsconstructor(maxPercentDifference: Double, rootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\"))) : SnapshotHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#constructors","title":"Constructors","text":"SnapshotVerifier [jvm]@JvmOverloadsconstructor(maxPercentDifference: Double, rootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\")))"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#functions","title":"Functions","text":"Name Summary close [jvm]open override fun close() newFrameHandler [jvm]open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/-snapshot-verifier/","title":"SnapshotVerifier - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier/SnapshotVerifier</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/-snapshot-verifier/#snapshotverifier","title":"SnapshotVerifier","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(maxPercentDifference: Double, rootDirectory: File = File(System.getProperty(\"paparazzi.snapshot.dir\")))</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/close/","title":"close - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier/close</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/close/#close","title":"close","text":"<p>[jvm]\\ open override fun close()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/new-frame-handler/","title":"newFrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier/newFrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/new-frame-handler/#newframehandler","title":"newFrameHandler","text":"<p>[jvm]\\ open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/","title":"TestName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/#testname","title":"TestName","text":"<p>[jvm]\\ class TestName(val packageName: String, val className: String, val methodName: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/#constructors","title":"Constructors","text":"TestName [jvm]constructor(packageName: String, className: String, methodName: String)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/#properties","title":"Properties","text":"Name Summary className [jvm]val className: String methodName [jvm]val methodName: String packageName [jvm]val packageName: String"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/#functions","title":"Functions","text":"Name Summary copy [jvm]fun copy(packageName: String = this.packageName, className: String = this.className, methodName: String = this.methodName): TestName"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/-test-name/","title":"TestName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/TestName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/-test-name/#testname","title":"TestName","text":"<p>[jvm]\\ constructor(packageName: String, className: String, methodName: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/class-name/","title":"className - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/className</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/class-name/#classname","title":"className","text":"<p>[jvm]\\ val className: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/copy/","title":"copy - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/copy</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/copy/#copy","title":"copy","text":"<p>[jvm]\\ fun copy(packageName: String = this.packageName, className: String = this.className, methodName: String = this.methodName): TestName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/method-name/","title":"methodName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/methodName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/method-name/#methodname","title":"methodName","text":"<p>[jvm]\\ val methodName: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/package-name/","title":"packageName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/packageName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/package-name/#packagename","title":"packageName","text":"<p>[jvm]\\ val packageName: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/#types","title":"Types","text":"Name Summary AccessibilityRenderExtension [jvm]class AccessibilityRenderExtension : RenderExtension"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/","title":"AccessibilityRenderExtension - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility/AccessibilityRenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#accessibilityrenderextension","title":"AccessibilityRenderExtension","text":"<p>[jvm]\\ class AccessibilityRenderExtension : RenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#constructors","title":"Constructors","text":"AccessibilityRenderExtension [jvm]constructor()"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#functions","title":"Functions","text":"Name Summary renderView [jvm]open override fun renderView(contentView: View): ViewAllows this extension to modify the view hierarchy represented by contentView."},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/-accessibility-render-extension/","title":"AccessibilityRenderExtension - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility/AccessibilityRenderExtension/AccessibilityRenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/-accessibility-render-extension/#accessibilityrenderextension","title":"AccessibilityRenderExtension","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/render-view/","title":"renderView - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility/AccessibilityRenderExtension/renderView</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/render-view/#renderview","title":"renderView","text":"<p>[jvm]\\ open override fun renderView(contentView: View): View</p> <p>Allows this extension to modify the view hierarchy represented by contentView.</p> <p>Returns the root view of the modified hierarchy.</p>"}]}