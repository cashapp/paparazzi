import org.jetbrains.kotlin.gradle.dsl.KotlinProjectExtension
import org.jetbrains.kotlin.gradle.plugin.KotlinCommonPluginWrapper

apply plugin: 'com.github.ben-manes.versions'

project.gradle.settingsEvaluated { settings ->
  settings.apply("plugin" to "org.gradle.toolchains.foojay-resolver-convention")
}

buildscript {
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
    //mavenLocal()
  }

  dependencies {
    classpath libs.plugin.kotlin
    classpath libs.plugin.android
    classpath libs.plugin.mavenPublish
    classpath libs.plugin.dokka
    classpath libs.plugin.versions
    classpath libs.plugin.spotless
    classpath libs.plugin.buildConfig
    classpath libs.plugin.ksp
    classpath libs.grgit
  }
}

subprojects {
  version = property("VERSION_NAME") as String

  repositories {
    mavenCentral()
    google()
    //mavenLocal()
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events 'passed', 'failed', 'skipped'
      exceptionFormat 'full'
      showExceptions true
      showStackTraces true
      showCauses true
    }
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = libs.versions.javaTarget.get()
    targetCompatibility = libs.versions.javaTarget.get()
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach {
    kotlinOptions {
      jvmTarget = libs.versions.javaTarget.get()
    }
  }

  plugins.withType(KotlinCommonPluginWrapper).configureEach {
    def kotlinExtension = project.extensions.getByType(KotlinProjectExtension)
    kotlinExtension.jvmToolchain {
      it.languageVersion.set(JavaLanguageVersion.of(libs.versions.javaTarget.get()))
      it.vendor.set(JvmVendorSpec.AZUL)
    }
  }

  plugins.withId('com.vanniktech.maven.publish') {
    publishing {
      repositories {
        maven {
          name = "projectLocalMaven"
          url = "${rootProject.buildDir}/localMaven"
        }
        /**
         * Want to push to an internal repository for testing?
         * Set the following properties in ~/.gradle/gradle.properties.
         *
         * internalUrl=YOUR_INTERNAL_URL
         * internalUsername=YOUR_USERNAME
         * internalPassword=YOUR_PASSWORD
         */
        maven {
          name = "internal"
          url = providers.gradleProperty("internalUrl")
          credentials(PasswordCredentials)
        }
      }
    }
  }

  tasks.register('emptySourcesJar', Jar) {
    // TODO: fetch sources from the corresponding AOSP repos.
    archiveClassifier = 'sources'
  }

  tasks.register('emptyJavadocJar', Jar) {
    archiveClassifier = 'javadoc'
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    kotlin {
      target("src/**/*.kt")
      // ktlint doesn't honour .editorconfig yet: https://github.com/diffplug/spotless/issues/142
      ktlint(libs.versions.ktlint.get()).editorConfigOverride([
        'insert_final_newline': 'true',
        'end_of_line': 'lf',
        'charset': 'utf-8',
        'indent_size': '2',
        'trim_trailing_whitespace': 'true',
        'kotlin_imports_layout': 'ascii'
      ])
    }
  }

  // Avoid the native projects in 'libs'
  plugins.withId('org.jetbrains.kotlin.jvm') {
    // Create a test task for each supported JDK.
    [17, 18].each { majorVersion ->
      def jdkTest = tasks.register("testJdk$majorVersion", Test) {
        javaLauncher = javaToolchains.launcherFor {
          languageVersion = JavaLanguageVersion.of(majorVersion)
          vendor = JvmVendorSpec.AZUL
        }

        description = "Runs the test suite on JDK $majorVersion"
        group = LifecycleBasePlugin.VERIFICATION_GROUP

        // Copy inputs from normal Test task.
        def testTask = tasks.getByName("test")
        classpath = testTask.classpath
        testClassesDirs = testTask.testClassesDirs
      }
      tasks.named("check").configure {
        dependsOn(jdkTest)
      }
    }
  }
}

tasks.register("clean", Delete).configure {
  delete rootProject.buildDir
}

allprojects { project ->
  tasks.register("mavenLocalize").configure { task ->
    def projectRootDir = project.projectDir
    task.doFirst {
      projectRootDir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
        if (file.name != 'build.gradle') {
          return
        }
        def text = file.text
        file.withWriter { w ->
          // Intentional concatenation to prevent self-replacement
          w << text.replace("//" + "mavenLocal()", "mavenLocal()")
        }
      }
    }
  }
}
