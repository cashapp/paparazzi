apply plugin: 'com.github.ben-manes.versions'

buildscript {
  apply from: '../gradle/dependencies.gradle'

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
    //mavenLocal()
  }

  dependencies {
    classpath(libs.kotlinGradlePlugin)
    classpath(libs.androidGradlePlugin)
    classpath(libs.mavenPublishGradlePlugin)
    classpath(libs.grgitGradlePlugin)
    classpath(libs.dokkaGradlePlugin)
    classpath(libs.versionsGradlePlugin)
    classpath(libs.spotlessGradlePlugin)
  }
}

subprojects {
  repositories {
    mavenCentral()
    google()
    //mavenLocal()
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events "failed"
      exceptionFormat "full"
      showExceptions true
      showStackTraces true
      showCauses true
    }
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }

  tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach {
    kotlinOptions {
      jvmTarget = "1.8"
    }
  }

  plugins.withId('com.vanniktech.maven.publish') {
    publishing {
      repositories {
        maven {
          name = "projectLocalMaven"
          url = "${rootProject.buildDir}/localMaven"
        }
        /**
         * Want to push to an internal repository for testing?
         * Set the following properties in ~/.gradle/gradle.properties.
         *
         * internalUrl=YOUR_INTERNAL_URL
         * internalUsername=YOUR_USERNAME
         * internalPassword=YOUR_PASSWORD
         */
        maven {
          name = "internal"
          url = providers.gradleProperty("internalUrl").forUseAtConfigurationTime()
          credentials(PasswordCredentials)
        }
      }
    }
  }

  tasks.register('emptySourcesJar', Jar) {
    // TODO: fetch sources from the corresponding AOSP repos.
    archiveClassifier = 'sources'
  }

  tasks.register('emptyJavadocJar', Jar) {
    archiveClassifier = 'javadoc'
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    kotlin {
      target("src/**/*.kt")
      // ktlint doesn't honour .editorconfig yet: https://github.com/diffplug/spotless/issues/142
      ktlint('0.46.1').editorConfigOverride([
        'insert_final_newline': 'true',
        'end_of_line': 'lf',
        'charset': 'utf-8',
        'indent_size': '2',
        'trim_trailing_whitespace': 'true',
        'kotlin_imports_layout': 'ascii'
      ])
    }
  }
}

tasks.register("clean", Delete).configure {
  delete rootProject.buildDir
}

allprojects { project ->
  tasks.register("mavenLocalize").configure { task ->
    def projectRootDir = project.projectDir
    task.doFirst {
      projectRootDir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
        if (file.name != 'build.gradle') {
          return
        }
        def text = file.text
        file.withWriter { w ->
          // Intentional concatenation to prevent self-replacement
          w << text.replace("//" + "mavenLocal()", "mavenLocal()")
        }
      }
    }
  }
}
