import org.jetbrains.kotlin.gradle.plugin.AbstractKotlinPluginKt

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'dev.drewhamilton.poko'

java {
  sourceCompatibility = libs.versions.javaTarget.get()
  targetCompatibility = libs.versions.javaTarget.get()
}

def artifactType = Attribute.of('artifactType', String)

configurations {
  unzip {
    attributes.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  registerTransform(org.gradle.api.internal.artifacts.transform.UnzipTransform) {
    from.attribute(artifactType, ArtifactTypeDefinition.JAR_TYPE)
    to.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  // Paparazzi is a Kotlin JVM module and thus cannot depend on Android library artifacts (AARs)
  // TODO: Use Gradle transforms to extract/rename classes.jar's from AARs
  api files('libs/compose-runtime-android-1.5.0.jar')
  implementation files('libs/compose-ui-android-1.5.0.jar') // Need implementation dependency to reference AbstractComposeView for AccessibilityRenderExtension
  // Needed to get compose bounds and annotated strings for Compose support for AccessibilityRenderExtension
  compileOnly files('libs/compose-ui-geometry-android-1.5.0.jar')
  compileOnly files('libs/compose-ui-text-android-1.5.0.jar')
  compileOnly libs.androidx.lifecycleCommon
  compileOnly files('libs/lifecycle-runtime-2.6.1.jar')
  compileOnly files('libs/savedstate-1.2.1.jar')
  compileOnly files('libs/androidx-activity-1.5.0.jar')

  implementation libs.bytebuddy.agent
  implementation libs.bytebuddy.core
  implementation libs.trove4j
  api libs.layoutlib.native.jdk11
  api libs.tools.common
  api libs.tools.layoutlib
  api libs.tools.ninepatch
  api libs.tools.sdkCommon
  api libs.kxml2
  api libs.junit
  api libs.androidx.annotations
  api libs.guava
  api libs.kotlinx.coroutines.core
  api libs.okio
  api platform(libs.kotlin.bom)
  implementation libs.moshi.core
  implementation libs.moshi.adapters
  implementation libs.moshi.kotlinReflect
  implementation libs.jcodec.core
  implementation libs.jcodec.javase

  def osName = System.getProperty("os.name").toLowerCase(Locale.US)
  if (osName.startsWith("mac")) {
    def osArch = System.getProperty("os.arch").toLowerCase(Locale.US)
    if (osArch.startsWith("x86")) {
      unzip libs.layoutlib.native.macOsX
    } else {
      unzip libs.layoutlib.native.macArm
    }
  } else if (osName.startsWith("windows")) {
    unzip libs.layoutlib.native.windows
  } else {
    unzip libs.layoutlib.native.linux
  }

  testImplementation libs.truth

  add(AbstractKotlinPluginKt.PLUGIN_CLASSPATH_CONFIGURATION_NAME, libs.compose.compiler)
}

tasks.named("dokkaGfm").configure {
  outputDirectory = rootProject.file("docs/1.x")

  dokkaSourceSets.named("main") {
    configureEach {
      reportUndocumented = false
      skipDeprecated = true
      jdkVersion = 8
      perPackageOption {
        prefix = "app.cash.paparazzi.internal"
        suppress = true
      }
    }
  }
}

def generateTestConfig = tasks.register("generateTestConfig") {
  def resources = layout.buildDirectory.file('intermediates/paparazzi/resources.json')
  outputs.file(resources)

  doLast {
    File configFile = resources.get().asFile
    configFile.write("""{
      "mainPackage": "app.cash.paparazzi",
      "mergeResourcesOutputDir": ".",
      "targetSdkVersion": "34",
      "platformDir": "platforms/android-34/",
      "mergeAssetsOutputDir": ".",
      "resourcePackageNames": ["app.cash.paparazzi"],
      "projectResourceDirs": [],
      "moduleResourceDirs": [],
      "aarExplodedDirs": [],
      "projectAssetDirs": [],
      "aarAssetDirs": []
    }""")
  }
}

tasks.withType(Test).configureEach {
  dependsOn(generateTestConfig)
  systemProperty(
    "paparazzi.test.resources",
    generateTestConfig.map { it.outputs.files.singleFile }.get().path
  )
  systemProperty(
    "paparazzi.project.dir",
    project.layout.projectDirectory.toString()
  )
  systemProperty(
    "paparazzi.build.dir",
    project.layout.buildDirectory.get().toString()
  )
  systemProperty(
    "paparazzi.report.dir",
    project.extensions.getByType(ReportingExtension).baseDirectory.dir("paparazzi").get().toString()
  )
  systemProperty(
    "paparazzi.snapshot.dir",
    project.layout.projectDirectory.dir("src/test/snapshots").toString()
  )
  systemProperty(
    "paparazzi.artifacts.cache.dir",
    project.gradle.gradleUserHomeDir.path
  )
  systemProperty(
    "paparazzi.platform.data.root",
    configurations.unzip.singleFile.absolutePath
  )
  // Uncomment to debug JNI issues in layoutlib
  // jvmArgs '-Xcheck:jni'
  testLogging {
    events 'passed', 'failed', 'skipped'
    exceptionFormat 'FULL'
    showCauses true
    showExceptions true
    showStackTraces true
  }
}
