import org.gradle.work.DisableCachingByDefault
import org.jetbrains.kotlin.gradle.plugin.AbstractKotlinPluginKt
import com.android.build.gradle.internal.publishing.AndroidArtifacts
import org.gradle.api.artifacts.transform.TransformParameters
import java.nio.file.Files
import java.util.zip.ZipFile

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'dev.drewhamilton.poko'

java {
  sourceCompatibility = libs.versions.javaTarget.get()
  targetCompatibility = libs.versions.javaTarget.get()
}

configurations {
  unzip {
    attributes.attribute(AndroidArtifacts.ARTIFACT_TYPE, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

configureAarAsJarForConfiguration("compileOnly")
configureAarAsJarForConfiguration("testImplementation")

dependencies {
  registerTransform(org.gradle.api.internal.artifacts.transform.UnzipTransform) {
    from.attribute(AndroidArtifacts.ARTIFACT_TYPE, ArtifactTypeDefinition.JAR_TYPE)
    to.attribute(AndroidArtifacts.ARTIFACT_TYPE, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
  registerTransform(IdentityTransform) {
    from.attribute(AndroidArtifacts.ARTIFACT_TYPE, "jar")
    to.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aarAsJar")
  }
  registerTransform(ExtractClassesJarTransform) {
    from.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aar")
    to.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aarAsJar")
  }
}

dependencies {
  testImplementationAarAsJar libs.androidx.compose.ui.android
  compileOnlyAarAsJar libs.androidx.compose.ui.android
  compileOnlyAarAsJar libs.androidx.activity

  implementation libs.bytebuddy.agent
  implementation libs.bytebuddy.core
  implementation libs.trove4j
  api libs.layoutlib.native.jdk11
  api libs.tools.common
  api libs.tools.layoutlib
  api libs.tools.ninepatch
  api libs.tools.sdkCommon
  api libs.kxml2
  api libs.junit
  api libs.androidx.annotations
  api libs.guava
  api libs.kotlinx.coroutines.core
  api libs.okio
  api platform(libs.kotlin.bom)
  implementation libs.moshi.core
  implementation libs.moshi.adapters
  implementation libs.moshi.kotlinReflect

  def osName = System.getProperty("os.name").toLowerCase(Locale.US)
  if (osName.startsWith("mac")) {
    def osArch = System.getProperty("os.arch").toLowerCase(Locale.US)
    if (osArch.startsWith("x86")) {
      unzip libs.layoutlib.native.macOsX
    } else {
      unzip libs.layoutlib.native.macArm
    }
  } else if (osName.startsWith("windows")) {
    unzip libs.layoutlib.native.windows
  } else {
    unzip libs.layoutlib.native.linux
  }

  testImplementation libs.truth

  add(AbstractKotlinPluginKt.PLUGIN_CLASSPATH_CONFIGURATION_NAME, libs.compose.compiler)
}

tasks.named("dokkaGfm").configure {
  outputDirectory = rootProject.file("docs/1.x")

  dokkaSourceSets.named("main") {
    configureEach {
      reportUndocumented = false
      skipDeprecated = true
      jdkVersion = 8
      perPackageOption {
        prefix = "app.cash.paparazzi.internal"
        suppress = true
      }
    }
  }
}

def generateTestConfig = tasks.register("generateTestConfig") {
  def resources = layout.buildDirectory.file('intermediates/paparazzi/resources.json')
  outputs.file(resources)

  doLast {
    File configFile = resources.get().asFile
    configFile.write("""{
      "mainPackage": "app.cash.paparazzi",
      "mergeResourcesOutputDir": ".",
      "targetSdkVersion": "34",
      "platformDir": "platforms/android-34/",
      "mergeAssetsOutputDir": ".",
      "resourcePackageNames": ["app.cash.paparazzi"],
      "projectResourceDirs": [],
      "moduleResourceDirs": [],
      "aarExplodedDirs": [],
      "projectAssetDirs": [],
      "aarAssetDirs": []
    }""")
  }
}

tasks.withType(Test).configureEach {
  dependsOn(generateTestConfig)
  systemProperty(
    "paparazzi.test.resources",
    generateTestConfig.map { it.outputs.files.singleFile }.get().path
  )
  systemProperty(
    "paparazzi.project.dir",
    project.layout.projectDirectory.toString()
  )
  systemProperty(
    "paparazzi.build.dir",
    project.layout.buildDirectory.get().toString()
  )
  systemProperty(
    "paparazzi.report.dir",
    project.extensions.getByType(ReportingExtension).baseDirectory.dir("paparazzi").get().toString()
  )
  systemProperty(
    "paparazzi.snapshot.dir",
    project.layout.projectDirectory.dir("src/test/snapshots").toString()
  )
  systemProperty(
    "paparazzi.artifacts.cache.dir",
    project.gradle.gradleUserHomeDir.path
  )
  systemProperty(
    "paparazzi.platform.data.root",
    configurations.unzip.singleFile.absolutePath
  )
  // Uncomment to debug JNI issues in layoutlib
  // jvmArgs '-Xcheck:jni'
  testLogging {
    events 'passed', 'failed', 'skipped'
    exceptionFormat 'FULL'
    showCauses true
    showExceptions true
    showStackTraces true
  }
}

def configureAarAsJarForConfiguration(String configuration) {
  def aarAsJar = project.configurations
    .create("${configuration}AarAsJar") {
      canBeResolved = true
      attributes.attribute(
        AndroidArtifacts.ARTIFACT_TYPE,
        "release"
      )
      attributes.attribute(
        Usage.USAGE_ATTRIBUTE,
        project.getObjects().named(Usage, Usage.JAVA_API)
      )
    }.incoming
    .artifactView { viewConfiguration ->
      viewConfiguration.attributes.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aarAsJar")
    }
    .files

  project.configurations
    .getByName(configuration)
    .dependencies
    .add(project.dependencies.create(aarAsJar))
}

@DisableCachingByDefault
abstract class IdentityTransform implements TransformAction<TransformParameters.None> {
  @PathSensitive(PathSensitivity.ABSOLUTE)
  @InputArtifact
  abstract Provider<FileSystemLocation> getInputArtifact()

  @Override
  void transform(TransformOutputs transformOutputs) {
    def input = getInputArtifact().get().asFile
    if (input.isDirectory()) {
      transformOutputs.dir(input)
    } else if (input.isFile()) {
      transformOutputs.file(input)
    } else {
      throw new IllegalArgumentException(
        "File/directory does not exist: ${input.absolutePath}"
      )
    }
  }
}

@DisableCachingByDefault
abstract class ExtractClassesJarTransform implements TransformAction<TransformParameters.None> {
  @PathSensitive(PathSensitivity.NAME_ONLY)
  @InputArtifact
  abstract Provider<FileSystemLocation> getPrimaryInput()

  @Override
  void transform(TransformOutputs outputs) {
    ZipFile zip = null
    try {
      def file = getPrimaryInput().get().asFile
      def aarFilename = file.name.substring(0, file.name.lastIndexOf('.'))
      zip = new ZipFile(file)
      def entries = zip.entries()
      while (entries.hasMoreElements()) {
        def item = entries.nextElement()
        if (item.isDirectory()) continue

        if (item.name == "classes.jar") {
          def output = outputs.file(aarFilename + "-" + item.name)
          def inputStream = null
          try {
            inputStream = zip.getInputStream(item)
            Files.copy(inputStream, output.toPath())
          } finally {
            if (inputStream != null) {
              inputStream.close()
            }
          }
        }
      }
    } finally {
      if (zip != null) {
        zip.close()
      }
    }
  }
}
