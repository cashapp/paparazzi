apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'org.jetbrains.dokka'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
  api deps.layoutlib
  api deps.tools.common
  api deps.tools.layoutlib
  api deps.tools.sdkcommon
  api deps.kxml2
  api deps.junit
  api deps.androidx.annotations
  api deps.guava
  api deps.kotlinx.coroutines.core
  api deps.okio
  implementation deps.apkparser
  implementation deps.moshi.core
  implementation deps.moshi.adapters
  kapt deps.moshi.kotlinCodegen
  implementation deps.kotlin.stdlib.jdk8
  implementation deps.jcodec.core
  implementation deps.jcodec.javase
  implementation project(':paparazzi-agent')

  testImplementation deps.assertj
}

afterEvaluate { project ->
  project.tasks.dokka {
    outputDirectory = "$rootDir/docs/0.x"
    outputFormat = 'gfm'
    reportUndocumented = false
    skipDeprecated = true
    jdkVersion = 8
    packageOptions {
      prefix = "app.cash.paparazzi.internal"
      suppress = true
    }
  }
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"

def generateTestConfig = tasks.register("generateTestConfig") {
  doLast {
    File configParent = new File("$buildDir/intermediates/paparazzi")
    configParent.mkdirs()
    File configFile = new File(configParent, "resources.txt")
    configFile.withWriter('utf-8') { writer ->
      writer.writeLine("Library")
      writer.writeLine("app.cash.paparazzi")
      writer.writeLine(File.createTempDir("paparazzi_lib_tests", "res").absolutePath)
      writer.writeLine("${projectDir.absolutePath}/src/main/assets")
      writer.writeLine("28")
      def androidSdkFolder = System.getenv("ANDROID_SDK_ROOT")
              ?: System.getenv("ANDROID_HOME")
              ?: "$userHome/Library/Android/sdk"
      writer.writeLine("${androidSdkFolder}/platforms/android-28/")
      writer.writeLine("${configParent.absolutePath}/reports/paparazzi/variant")
      writer.writeLine("${configParent.absolutePath}/paparazzi/golden/variant")
    }
  }
}

test {
  dependsOn(generateTestConfig)
}