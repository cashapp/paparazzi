apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.vanniktech.maven.publish'

gradlePlugin {
  plugins {
    paparazzi {
      id = 'app.cash.paparazzi'
      implementationClass = 'app.cash.paparazzi.gradle.PaparazziPlugin'
    }
  }
}

dependencies {
  compileOnly gradleApi()
  implementation platform(libs.kotlin.bom)
  implementation libs.plugin.kotlin
  implementation libs.plugin.android
  implementation(libs.tools.sdkCommon) {
    because "SymbolUtils.getPackageNameFromManifest removed in AGP 7.0.  Replace?"
  }

  testImplementation libs.junit
  testImplementation libs.truth
}

sourceSets {
  main.java.srcDir 'src/generated/kotlin'
}

def generateVersion = tasks.register("pluginVersion") {
  def outputDir = file('src/generated/kotlin')

  inputs.property 'version', version
  inputs.property 'nativeLibVersion', libs.versions.layoutlib
  outputs.dir outputDir

  doLast {
    def versionFile = file("${outputDir}/app/cash/paparazzi/Version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package app.cash.paparazzi
const val VERSION = "${project.version}"
const val NATIVE_LIB_VERSION = "${libs.versions.layoutlib.get()}"
"""
  }
}

tasks.named('compileKotlin').configure {
  it.dependsOn(generateVersion)
}

tasks.withType(Test).configureEach {
  dependsOn(':paparazzi:publishMavenPublicationToProjectLocalMavenRepository')
  dependsOn(':paparazzi-agent:publishMavenPublicationToProjectLocalMavenRepository')
}

// When cleaning this project, we also want to clean the test projects.
tasks.named("clean").configure { cleaner ->
  cleaner.doFirst {
    project.file('src/test/projects').eachFile { root ->
      new File(root, '.gradle').deleteDir()
      new File(root, 'build').deleteDir()
    }
  }
}
