import org.jetbrains.kotlin.gradle.plugin.KotlinPluginKt

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.vanniktech.maven.publish'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def artifactType = Attribute.of('artifactType', String)

configurations {
  unzip {
    attributes.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  registerTransform(org.gradle.api.internal.artifacts.transform.UnzipTransform) {
    from.attribute(artifactType, ArtifactTypeDefinition.JAR_TYPE)
    to.attribute(artifactType, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

dependencies {
  // Paparazzi is a Kotlin JVM module and thus cannot depend on Android library artifacts (AARs)
  // TODO: Use Gradle transforms to extract/rename classes.jar's from AARs
  api files('libs/compose-runtime-1.2.1.jar')
  compileOnly files('libs/compose-ui-1.2.1.jar')
  compileOnly deps.androidx.lifecycleCommon
  compileOnly files('libs/lifecycle-runtime-2.5.0.jar')
  compileOnly files('libs/savedstate-1.2.0.jar')

  api deps.layoutlib.native.jdk11
  api deps.tools.common
  api deps.tools.layoutlib
  api deps.tools.ninepatch
  api deps.tools.sdkcommon
  api deps.kxml2
  api deps.junit
  api deps.androidx.annotations
  api deps.guava
  api deps.kotlinx.coroutines.core
  api deps.okio
  api platform(deps.kotlin.bom)
  implementation deps.moshi.core
  implementation deps.moshi.adapters
  kapt deps.moshi.kotlinCodegen
  implementation deps.jcodec.core
  implementation deps.jcodec.javase
  implementation projects.paparazziAgent

  def osName = System.getProperty("os.name").toLowerCase(Locale.US)
  if (osName.startsWith("mac")) {
    def osArch = System.getProperty("os.arch").toLowerCase(Locale.US)
    if (osArch.startsWith("x86")) {
      unzip deps.layoutlib.native.macOsX
    } else {
      unzip deps.layoutlib.native.macArm
    }
  } else if (osName.startsWith("windows")) {
    unzip deps.layoutlib.native.windows
  } else {
    unzip deps.layoutlib.native.linux
  }

  testImplementation deps.assertj

  add(KotlinPluginKt.PLUGIN_CLASSPATH_CONFIGURATION_NAME, deps.compose.compiler)
}

tasks.named("dokkaGfm").configure {
  outputDirectory = rootProject.file("../docs/1.x")

  dokkaSourceSets.named("main") {
    configureEach {
      reportUndocumented = false
      skipDeprecated = true
      jdkVersion = 8
      perPackageOption {
        prefix = "app.cash.paparazzi.internal"
        suppress = true
      }
    }
  }
}

def generateTestConfig = tasks.register("generateTestConfig") {
  def resources = "$buildDir/intermediates/paparazzi/resources.txt"
  outputs.file(resources)

  doLast {
    File configFile = new File(resources)
    configFile.withWriter('utf-8') { writer ->
      writer.writeLine("app.cash.paparazzi")
      writer.writeLine(".")
      writer.writeLine("31")
      writer.writeLine("platforms/android-31/")
      writer.writeLine(".")
      writer.writeLine("app.cash.paparazzi")
    }
  }
}

tasks.withType(Test).configureEach {
  dependsOn(generateTestConfig)
  systemProperty(
    "paparazzi.test.resources",
    generateTestConfig.map { it.outputs.files.singleFile }.get().path
  )
  systemProperty(
    "paparazzi.platform.data.root",
    configurations.unzip.singleFile.absolutePath
  )
  // Uncomment to debug JNI issues in layoutlib
  // jvmArgs '-Xcheck:jni'
  testLogging {
    events 'passed', 'failed', 'skipped', 'standardOut', 'standardError'
    exceptionFormat 'FULL'
    showCauses true
    showExceptions true
    showStackTraces true
    showStandardStreams true
  }
}
