import org.jetbrains.kotlin.gradle.dsl.KotlinProjectExtension
import org.jetbrains.kotlin.gradle.plugin.KotlinCommonPluginWrapper

apply plugin: 'com.github.ben-manes.versions'

project.gradle.settingsEvaluated { settings ->
  settings.apply("plugin" to "org.gradle.toolchains.foojay-resolver-convention")
}

buildscript {
  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
    //mavenLocal()
  }

  dependencies {
    classpath libs.plugin.kotlin
    classpath libs.plugin.android
    classpath libs.plugin.versions
    classpath libs.plugin.spotless

    // Normally you would declare a version here, but we use dependency substitution in
    // settings.gradle to use the version built from inside the repo.
    classpath 'app.cash.paparazzi:paparazzi-gradle-plugin'
  }
}

subprojects {
  repositories {
    mavenCentral()
    google()
    //mavenLocal()
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events "passed", "failed", "skipped", "standardOut", "standardError"
      exceptionFormat "full"
      showExceptions true
      showStackTraces true
      showCauses true
    }
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = libs.versions.javaTarget.get()
    targetCompatibility = libs.versions.javaTarget.get()
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach {
    kotlinOptions {
      jvmTarget = libs.versions.javaTarget.get()
    }
  }

  plugins.withType(KotlinCommonPluginWrapper).configureEach {
    def kotlinExtension = project.extensions.getByType(KotlinProjectExtension)
    kotlinExtension.jvmToolchain {
      it.languageVersion.set(JavaLanguageVersion.of(libs.versions.javaTarget.get()))
      it.vendor.set(JvmVendorSpec.AZUL)
    }
  }

  apply plugin: 'com.diffplug.spotless'
  spotless {
    kotlin {
      target("src/**/*.kt")
      // ktlint doesn't honour .editorconfig yet: https://github.com/diffplug/spotless/issues/142
      ktlint(libs.versions.ktlint.get()).editorConfigOverride([
        'insert_final_newline': 'true',
        'end_of_line': 'lf',
        'charset': 'utf-8',
        'indent_size': '2',
        'trim_trailing_whitespace': 'true',
        'ij_kotlin_imports_layout': '*,java.**,javax.**,kotlin.**,kotlinx.**,^'
      ])
    }
  }

  // Create a test task for each supported JDK.
  [17, 18].each { majorVersion ->
    def jdkTest = tasks.register("testJdk$majorVersion", Test) {
      javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(majorVersion)
        vendor = JvmVendorSpec.AZUL
      }

      description = "Runs the test suite on JDK $majorVersion"
      group = LifecycleBasePlugin.VERIFICATION_GROUP

      // Copy inputs from normal Test task.
      def testTask = tasks.getByName("test")
      classpath = testTask.classpath
      testClassesDirs = testTask.testClassesDirs
    }
    tasks.named("check").configure {
      dependsOn(jdkTest)
    }
  }
}

tasks.register("clean", Delete).configure {
  delete rootProject.buildDir
}
