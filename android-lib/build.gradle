import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 25
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    api project(':java-lib')
}

def compileAndroidResources = tasks.register("compileAndroidResources", Exec) {
    def aapt2 = Files.list(Paths.get(System.getenv("ANDROID_HOME"), "build-tools"))
            .max(Comparator.naturalOrder())
            .get()
            .resolve("aapt2")

    executable aapt2
    args 'compile',
         '--dir', "${projectDir}/src/main/res/",
         '-o', "${buildDir}/tmp/flat_res.zip"
}

def generateRJava = tasks.register("generateRJava", Exec) {
    def aapt2 = Files.list(Paths.get(System.getenv("ANDROID_HOME"), "build-tools"))
            .max(Comparator.naturalOrder())
            .get()
            .resolve("aapt2")
    def sdkJar = android.getBootClasspath()[0]

    executable aapt2
    args 'link',
         '-I', sdkJar,
         '--manifest', "${projectDir}/src/main/AndroidManifest.xml",
         '--java', "${buildDir}/generated/source/src/test/java",
         '-o', '/dev/null',
         "${buildDir}/tmp/flat_res.zip"
}

generateRJava.configure {
    it.dependsOn(compileAndroidResources)
}

tasks.withType(JavaCompile).configureEach {
    it.dependsOn(generateRJava)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    it.dependsOn(generateRJava)
}

sourceSets {
    test.java.srcDirs += "${buildDir}/generated/source/src/test/java/"
}