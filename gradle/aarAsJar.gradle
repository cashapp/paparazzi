import com.android.build.gradle.internal.publishing.AndroidArtifacts
import org.gradle.api.artifacts.transform.TransformParameters
import org.gradle.api.internal.artifacts.transform.UnzipTransform
import org.gradle.work.DisableCachingByDefault
import java.nio.file.Files
import java.util.zip.ZipFile

configurations {
  unzip {
    attributes.attribute(AndroidArtifacts.ARTIFACT_TYPE, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
}

configureAarAsJarForConfiguration("compileOnly")
configureAarAsJarForConfiguration("testImplementation")

dependencies {
  registerTransform(UnzipTransform) {
    from.attribute(AndroidArtifacts.ARTIFACT_TYPE, ArtifactTypeDefinition.JAR_TYPE)
    to.attribute(AndroidArtifacts.ARTIFACT_TYPE, ArtifactTypeDefinition.DIRECTORY_TYPE)
  }
  registerTransform(IdentityTransform) {
    from.attribute(AndroidArtifacts.ARTIFACT_TYPE, "jar")
    to.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aarAsJar")
  }
  registerTransform(ExtractClassesJarTransform) {
    from.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aar")
    to.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aarAsJar")
  }
}

def configureAarAsJarForConfiguration(String configuration) {
  def aarAsJar = project.configurations
    .create("${configuration}AarAsJar") {
      canBeResolved = true
      attributes.attribute(
        AndroidArtifacts.ARTIFACT_TYPE,
        "release"
      )
      attributes.attribute(
        Usage.USAGE_ATTRIBUTE,
        project.getObjects().named(Usage, Usage.JAVA_API)
      )
    }.incoming
    .artifactView { viewConfiguration ->
      viewConfiguration.attributes.attribute(AndroidArtifacts.ARTIFACT_TYPE, "aarAsJar")
    }
    .files

  project.configurations
    .getByName(configuration)
    .dependencies
    .add(project.dependencies.create(aarAsJar))
}

@DisableCachingByDefault
abstract class IdentityTransform implements TransformAction<TransformParameters.None> {
  @PathSensitive(PathSensitivity.ABSOLUTE)
  @InputArtifact
  abstract Provider<FileSystemLocation> getInputArtifact()

  @Override
  void transform(TransformOutputs transformOutputs) {
    def input = getInputArtifact().get().asFile
    if (input.isDirectory()) {
      transformOutputs.dir(input)
    } else if (input.isFile()) {
      transformOutputs.file(input)
    } else {
      throw new IllegalArgumentException(
        "File/directory does not exist: ${input.absolutePath}"
      )
    }
  }
}

@DisableCachingByDefault
abstract class ExtractClassesJarTransform implements TransformAction<TransformParameters.None> {
  @PathSensitive(PathSensitivity.NAME_ONLY)
  @InputArtifact
  abstract Provider<FileSystemLocation> getPrimaryInput()

  @Override
  void transform(TransformOutputs outputs) {
    ZipFile zip = null
    try {
      def file = getPrimaryInput().get().asFile
      def aarFilename = file.name.substring(0, file.name.lastIndexOf('.'))
      zip = new ZipFile(file)
      def entries = zip.entries()
      while (entries.hasMoreElements()) {
        def item = entries.nextElement()
        if (item.isDirectory()) continue

        if (item.name == "classes.jar") {
          def output = outputs.file(aarFilename + "-" + item.name)
          def inputStream = null
          try {
            inputStream = zip.getInputStream(item)
            Files.copy(inputStream, output.toPath())
          } finally {
            if (inputStream != null) {
              inputStream.close()
            }
          }
        }
      }
    } finally {
      if (zip != null) {
        zip.close()
      }
    }
  }
}
